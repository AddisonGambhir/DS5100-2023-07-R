# Testing and Verification

<h2>Definitions</h2>
<p>Before we get started, let&rsquo;s review some definitions.</p>
<table style="width: 91.7209%;" border="1" cellspacing="1" cellpadding="1">
<tbody>
<tr>
<td style="width: 15.99%;"><strong>verification</strong></td>
<td style="width: 83.9332%;">Shows that the code meets the requirement specification&nbsp;<br />Example: You verify that I wrote the program you asked me to write.</td>
</tr>
<tr>
<td style="width: 15.99%;"><strong>validation</strong></td>
<td style="width: 83.9332%;">Shows that the code meets the real requirements Example: You show that the program is a valid solution to the user&rsquo;s problem.</td>
</tr>
<tr>
<td style="width: 15.99%;"><strong>quality</strong></td>
<td style="width: 83.9332%;">Suggests that validations falls on a scale, not a black-and-white idea. Defining the scale can be difficult.</td>
</tr>
<tr>
<td style="width: 15.99%;"><strong>specification</strong></td>
<td style="width: 83.9332%;">
<p>A precise and detailed statement about the properties some things must have</p>
<p>Design specification: exact instructions for how to build something</p>
<p>Requirements specifications: exact statements about what should be built</p>
</td>
</tr>
</tbody>
</table>
<p><strong>Specifications are very important</strong>. Not only are they used to guide the creation of the project, but also they&rsquo;re<span>&nbsp;</span><strong>vital for program testing and verification</strong>. That is, if you don&rsquo;t have specifications for the product, you cannot verify that you&rsquo;re doing the right thing. Likewise, if behavior is not defined, then it becomes difficult to know what is<span>&nbsp;</span><em>incorrect</em><span>&nbsp;</span>behavior.</p>
<p><strong>Edsger Dijkstra</strong><span>&nbsp;</span>was a famous computer scientist and A. M. Turing award winner. This quotation by him is a great one and very true. Even if you write a test suite of carefully crafted test cases, and if they all run and pass, it doesn&rsquo;t mean that no further bugs exist.</p>
<p>It is much easier to prove the existence of something than to disprove the existence of something.<span>&nbsp;</span><strong>This realization should motivate us to learn how to create carefully crafted unit tests so that we can test as much as we can.</strong></p>
<blockquote>
<p>&ldquo;Program testing can effectively show the presence of bugs but is hopeless for showing their absence.&rdquo;<br />--Edsger Dijkstra</p>
</blockquote>
<h2>Formal Verification</h2>
<p>Formal verification involves proof. There are three types:</p>
<ul>
<li>Hand-written, hand-checked</li>
<li>Hand-written, machine-checked (proof-carrying code)</li>
<li>Machine-written, machine-checked (static analysis)</li>
</ul>
<p>None of them are very widely used yet, but the latter two are increasing in popularity. Formal verification is complex, difficult, and takes a great deal of effort.</p>
<h2>Empirical Testing</h2>
<p>Instead of formal verification, correctness is demonstrated through empirical testing. Empirical testing shows it works on several inputs. In general, testing is:</p>
<ul>
<li>A lot easier than proof</li>
<li>A lot harder (and more involved) than writing code&nbsp;</li>
</ul>
<h2>Types of Empirical Testing</h2>
<p>There are many kinds of testing, but we will focus on unit testing in this module. Two other kinds of testing are integration and acceptance (beta) testing, which are out of the scope of this lesson. See below for a short description.</p>
<table border="1" cellspacing="1" cellpadding="1">
<tbody>
<tr>
<td><strong>Unit Testing</strong></td>
<td>Write code that tests the smallest possible units of the spec (must attempt to test every flow path). The programmer does unit testing as part of the coding process.</td>
</tr>
<tr>
<td><strong>Integration Testing</strong></td>
<td>Test that units work together.</td>
</tr>
<tr>
<td><strong>Acceptance Testing (Beta Testing)</strong></td>
<td>Give product to real users to try it out.</td>
</tr>
</tbody>
</table>

<h2>Flow Path</h2>

<p>A flow path is a unique execution sequence through a program unit. It is done as part of the coding process by the programmer. A good set of test data makes sure every possible path is followed (tests every possible behavior). Because loops are able to execute an arbitrarily large number of times, and because there &nbsp;potentially are an infinite number of inputs into a program, there are virtually an infinite number of flow paths. Exhaustive testing is usually impossible. However, we can overcome these odds by being clever about the kinds of tests that we write. We&rsquo;ll also learn about equivalence classes, which also help us overcome this hurdle.</p>

<p>Example of code showing various flow paths. For example, starting at Stmt<sub>1</sub>, then the condition of the while loop (C<sub>1</sub>) is true, so that takes us to the condition of the if statement (C<sub>2</sub>) but maybe this is false, so we end up in the else portion, Stmt<sub>3</sub>. This is an example of a flow path starting at Stmt<sub>1</sub> and ending up at Stmt<sub>3</sub>. In other words, there are many paths through a given program.</p>

![](../../media/FlowPathCode.png)

<div class="cell normal" data-type="normal">
<div class="innerCell"><hr />
<p class="auto-cursor-target">Source: Nada Basit&nbsp;</p>
</div>
</div>