[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS 5001: Programming for Data Science",
    "section": "",
    "text": "Welcome to Programming for Data Science, a collection of materials designed to support the course DS 5100 in the Data Science curriculum at UVA.\nIn this course, you will develop skills in Python and R Programming, as well as how to use the command line and GitHub.\nThe objective of this course is to introduce essential programming concepts, structures, and techniques.\nYou will gain confidence in not only reading code, but learning what it means to write good quality code.\nAdditionally, essential and complementary topics are taught, such as testing and debugging, exception handling, and an introduction to visualization."
  },
  {
    "objectID": "modules/m00/syllabus.html#welcome",
    "href": "modules/m00/syllabus.html#welcome",
    "title": "Syllabus",
    "section": "Welcome",
    "text": "Welcome\n\nWelcome to DS 5100 Programming for Data Science! In this course, we will develop skills in Python and R Programming, as well as the command line and GitHub. The objective of the course is to introduce essential programming concepts, structures, and techniques from a data science perspective. You will gain confidence in not only reading code, but learning what it means to write good quality code. Additionally, essential and complementary topics are taught, such as testing and debugging, exception handling, and an introduction to visualization.\n\n\nThis course is designed to teach the programming knowledge and skills necessary to become an effective data scientist.  The focus will be on code fluency – the ability to both write and read code, as well as to understand the nature of high quality code. Code fluency encompasses a variety of skills, from the ability to write functions and classes to testing and debugging to packaging and visualizing the results of coding.\n\n\nCode fluency is important because code is the primary medium through which we represent and express our most basic and complex ideas in data science. These ideas include everything from the structure of web pages to the process of back propagation in a neural network. Code is the language with which we represent data and the models that process and interpret data, as well as the data products that make use of our data and the analytical results from it.\n\n\nThis course is specifically focused on your ability to read and write code in Python and R. It is not a course in computer science or in data wrangling or in software development. Each of those elements will obviously play into our work, but our focus is on the fundamental knowledge of programming – the building blocks from which you can build complex (but not complicated) code to solve real world problems. \n\n\nThe guiding philosophy of the course is that coding is a practice like many other practices – such as the ability to speak a non-native human language, or to play a musical instrument, or to play a sport, or to perform such as in singing, acting, or dancing. These are all complex practices that involve higher forms of cognitive representation but are also embodied practices. This means that they have to be practiced, physically and repetitively, in order for you to be successful at them. Programming languages are like that.\n\n\nPut another way, programming is like cooking, carpentry, and other forms of material creation. Again, in each case high level cognition is involved, but so are the hands and eyes, and an appreciation of the subtle qualities of materials and ingredients is essential to successfully using them to create effective work – a sturdy and beautiful building or a satisfying and exquisite meal.\n\n\nAll of these practices, some of which I am sure each of you has had experience in, are based on the ideas of imitation and drilling which develop into generalization and integration and finally into excellence and mastery of design and execution. Therefore, this course will require the student to observe principles and imitate examples (though writing) on the path to generalization and fluency."
  },
  {
    "objectID": "modules/m00/syllabus.html#learning-goals",
    "href": "modules/m00/syllabus.html#learning-goals",
    "title": "Syllabus",
    "section": "Learning Goals",
    "text": "Learning Goals\n\nUpon completion of this course, you are expected to be able to do the following. In all cases, unless specified, both Python and R are included. In truth, you’ll probably learn more than this. :-)\n\n\nUnderstand the importance of data and programming for data science\n\n\n\nUnderstand the relationship between between data and data science.\n\n\nUnderstand how data is related to programming.\n\n\nKnow broadly what kinds of data exist.\n\n\n\nConfidently work in an appropriate programming environment\n\n\n\nBasic operations with Git and GitHub to manage and share your code.\n\n\nConfidently write code in Jupyter Lab, Visual Studio Code, and RStudio.\n\n\nUnderstand which editor is appropriate to which task.\n\n\nFind and use documents, data, and code online.\n\n\n\nIdentify and use data types and data structures\n\n\n\nKnow the elementary data types for each language:\n\n\nbooleans, integers, floats, strings, etc.\n\n\n\n\nKnow the elementary data structures for each language:\n\n\nPython: set, list, dictionary, and tuple.\n\n\nR: vectors, list, matrix, factor.\n\n\n\n\nKnow some of the advanced data structures for each language:\n\n\nPython: Numpy arrays and Pandas series and dataframes.\n\n\nR: dataframes and Tidy tibbles.\n\n\n\n\nKnow and perform basic operations for each data type and structure.\n\n\nSelect and apply an appropriate data structure based on the problem requirements.\n\n\n\nRead and Write to and from various data formats\n\n\n\nRead text and data files from disc \n\n\nImport data into a Pandas and R dataframes\n\n\n\nConfidently call and write functions and methods\n\n\n\nUnderstand the structure and use of functions for programming.\n\n\nUse built-in and import functions to perform fundamental tasks.\n\n\nCorrectly pass parameters and retrieve function output(s).\n\n\nUse built-in object methods for data types and structures, e.g. string methods and dataframe methods.\n\n\nKnow what vectorized functions and methods are.\n\n\n\nConfidently write a class and call its methods\n\n\n\nUnderstand role of classes in organizing code.\n\n\nUnderstand how classes group together variables as attributes and functions as methods into encapsulated components.\n\n\nUnderstand how classes can inherit the variables and methods of other classes.\n\n\n\nUse packages to augment existing data structures\n\n\n\nIn Python, NumPy and Pandas essentials (e.g. simple queries and small ML computation)\n\n\nIn Python and R, use a program API to utilize existing functions (e.g. assert statements.)\n\n\nIn R, apply the Tidyverse verbs, such as: select(), filter(), arrange(), mutate(), summarize()\n\n\nIn R, apply the Tidyverse Pipe operator to aggregate data\n\n\n\nWrite your own modules of classes in Python\n\n\n\nWrite classes and organize them into modules to make your more modular.\n\n\nMake your modules sharable so that others can install them with Python’s setup and install functions.\n\n\nWrite documentation for your modules so that others can make sense of them.\n\n\nWrite test scripts to go with your modules.\n\n\n\nWrite robust code by implementing the basic principles of program testing and debugging in Python\n\n\n\nCatch errors in your with exception handling and print statements.\n\n\nRead error messages produced by the interpreter.\n\n\nFix and harden broken code."
  },
  {
    "objectID": "modules/m00/syllabus.html#assessments",
    "href": "modules/m00/syllabus.html#assessments",
    "title": "Syllabus",
    "section": "Assessments",
    "text": "Assessments\n\nHomework Assignments\n\nHomework assignments will given throughout the semester, typically one for each module. \n\n\nYou are encouraged to first try to complete the homework by yourself. If you work with others, be sure you understand all of the work, and that your final submission is your own work.\n\n\nWhen submitting homework assignments, don’t forget to write the assignment title, your name, your UVA computing ID, and date at the top of each assignment.\n\n\nTypically, homework assignments that involve Jupyter Notebooks will be submitted through GradeScope as PDFs. However, in some cases the assignment will be submitted through Canvas.  In either case, your assignment will be listed in the week’s module.\n\n\n\nLateness Policy\n\nPlease submit HW assignments on time.\n\n\nIf an issue will prompt late submission, email the TA in advance to explain the situation.\n\n\nIf the HW is submitted late and it is not an excused lateness, 10% of the assignment total points will be deducted per day it is late.\n\n\n\nIn-Class Activities\n\nDuring each class, there will be practice scripts and notebooks made available to you. These are designed to exemplify the concepts conveyed in reading and dialog. Although the results of this work are not graded, you will be graded on your effort to complete them. This will count toward your participation grade.\n\n\n\nQuizzes\n\nThere will be several quizzes throughout the semester that will assess your knowledge of the various topics. Quizzes are based on the topics and code covered in the readings and activities.\n\n\nAll quizzes are mandatory for all students to take.\n\n\nQuizzes typically have ten questions and are worth 10 points each.\n\n\nAlthough they can be completed in less time, you have one hour to finish and submit your work. \n\n\nThe quizzes should be done closed book: please do not consult any resources including notes, books, the web, devices, or other external media.\n\n\nMaking up missed quizzes is not advised — their timing is part of their value. However, if you know in advance that you will miss any of the scheduled quizzes, you must make arrangements in advance with the instructor. At least one week in advance if possible, or as soon as you are able if an unforeseen event occurs preventing you from taking the quiz.\n\n\n\nCourse Project\n\nThe final project will focus on creating a module in Python. This module will address a data science problem and be sharable on GitHub (in principle) and installable by others. It will have proper documentation and a testing file. \n\n\nProject deliverables are due on the last day of course. See Collab for submission details.\n\n\nMore information on the project will be forthcoming.\n\n\n\nSpirit of the Course\n\nStudents must attend each class and participate in group work.\n\n\nFor the programming assignments and quizzes, you must submit your own work.\n\n\n\nSubmission of Assignments\n\nAll assignments must be submitted through Canvas or Gradescope by the specified due dates and times. It is crucial to complete all assigned work—failure to do so will likely result in failing the class."
  },
  {
    "objectID": "modules/m00/syllabus.html#grading",
    "href": "modules/m00/syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\n\nModel\nQuizes            20%\nHomework          20%\nProject           20%\nParticipation     20%\nFinal             20%\n\n\n\nScale\nGrade     Min  Max\nA+        98 - 100\nA         93 - 97\nA-        90 - 92\nB+        87 - 89\nB         83 - 86\nB-        80 - 82 ← minimum passing grade\n----------------- \nC+        77 - 79\nC         73 - 76\nC-        70 - 72"
  },
  {
    "objectID": "modules/m00/syllabus.html#texts",
    "href": "modules/m00/syllabus.html#texts",
    "title": "Syllabus",
    "section": "Texts",
    "text": "Texts\n\nCore Texts\n\nMany of our readings will draw from these texts. We will try to stick with some core texts to provide continuity. These will often be supplemented by shorter sources of information drawn from the web.\n\n\n\nLutz, 2013, Learning Python, 5th Edition, O’Reilly Media.\n\n\nMcKinney, 2017, Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython, 2nd Edition. O’Reilly Media.\n\n\nWickham and Grolemund, 2017, R for Data Science: Import, Tidy, Transform, Visualize, and Model Data, 1st Edition. O’Reilly Media.\n\n\nOther Texts \n\n\n\n\nOther Texts\n\nWe occasionally draw from the following texts. They are listed here as supplementary resources that you may want to use later on.\n\nFor R\n\nParts of some of these more be included in various modules.\n\n\n\nCotton, 2013, Learning R, O’Reilly Media.\n\n\nRodríguez, 2021, Introducing R, Princeton University faculty website.  This a concise website that may want to refer to in your Linear Models course.\n\n\nDouglas, et al 2022, An Introduction to R, self published.\n\n\nPeng, 2020, R Programming for Data Science, self published.\n\n\nFor Python\n\nOnce you get the hang of Python, you will want to embark on becoming a more effect data science software developer. These books can help.\n\n\n\nBrett Slatkin, 2019, Effective Python: 90 Specific Ways to Write Better Python, 2nd Edition, Addison-Wesley.\n\n\nKatz, Philipp and David Katz, 2019, Learn Python by Building Data Science Applications, Packt Publishing.\n\n\nLee Vaughan, 2020, Real-World Python, No Starch Press.\n\n\n\n\nAccess to materials\nThis course uses a number of books from the O’Reilly Media’s online library. This is a commercial site, but as students of UVA, you have free access to it. To access the collection, first you must create an account on the site. See the document Setting up a student account on O’Reilly’s Site for help.\n\n\nWebsites\n\n\nPython’s official documentation\n\n\nPython’s official tutorial\n\n\nR’s official documentation\n\n\nW3Schools Python Tutorial\n\n\nW3Schools R Tutorial\n\n\nGeeksForGeeks on Python\n\n\nGeeksForGeeks on R\n\n\nTutorialspoint on Python\n\n\nTutorialspoint on R\n\n\n\n\nCheatsheets\n\n\nPython Cheatsheets\n\n\nRStudio Cheatsheets\n\n\n\n\nBooks to Broaden Your Horizons\n\n\nGraham, 2010, Hackers & Painters: Big Ideas from the Computer Age\n\n\nBrooks, 1995, The Mythical Man Month\n\n\nShetterly, 2016, Hidden Figures: The American Dream and the Untold Story of the Black Women Mathematicians Who Helped Win the Space Race"
  },
  {
    "objectID": "modules/m00/syllabus.html#resources",
    "href": "modules/m00/syllabus.html#resources",
    "title": "Syllabus",
    "section": "Resources",
    "text": "Resources\n\nStudents have three choices for participating in coding exercises and completing coding assignments in the course:\n\n\n\nRivanna, UVA’s High Performance Computing Cluster. This may be access through the web or by SSH (don’t worry if you don’t know what that means yet). More information about this resource may be found here.\n\n\nCEDS, the Computational Environment for Data Science. This is a web-hosted and Windows-based virtual environment. You can access the site here. Here are step-by-step instructions for how to access this service.\n\n\nYour own computer. Please note that if you choose this option it will be harder to trouble-shoot any system level problems t hat may arise."
  },
  {
    "objectID": "modules/m00/syllabus.html#academic-integrity",
    "href": "modules/m00/syllabus.html#academic-integrity",
    "title": "Syllabus",
    "section": "Academic Integrity",
    "text": "Academic Integrity\n\nThe School of Data Science relies upon and cherishes its community of trust. We firmly endorse, uphold, and embrace the University’s Honor principle that students will not lie, cheat, or steal, nor shall they tolerate those who do. We recognize that even one honor infraction can destroy an exemplary reputation that has taken years to build. Acting in a manner consistent with the principles of honor will benefit every member of the community both while enrolled in the School of Data Science and in the future.\n\n\nStudents are expected to be familiar with the university honor code, including the section on academic fraud.\n\n\nEach assignment will describe allowed collaborations, and deviations from these will be considered Honor violations. If you have questions on what is allowable, ask! Unless otherwise noted, exams and individual assignments will be considered pledged that you have neither given nor received help. (Among other things, this means that you are not allowed to describe problems on an exam to a student who has not taken it yet. You are not allowed to show exam papers to another student or view another student’s exam papers while working on an exam.) Sending, receiving or otherwise copying electronic files that are part of course assignments are not allowed collaborations (except for those explicitly allowed in assignment instructions). \n\n\nAssignments or exams where honor infractions or prohibited collaborations occur will receive a zero grade for that entire assignment or exam. Such infractions will also be submitted to the Honor Committee if that is appropriate. Students who have had prohibited collaborations may not be allowed to work with partners on remaining homework assignments. \n\n\nIf you have been identified as a Student Disability Access Center (SDAC) student, please let the Center know you are taking this class. If you suspect you should be an SDAC student, please schedule an appointment with them for an evaluation. I happily and discretely provide the recommended accommodations for those students identified by the SDAC. Please contact your instructor one week before an exam so we can make appropriate accommodations. Website: https://www.studenthealth.virginia.edu/sdac \n\n\nIf you are affected by a situation that falls within issues addressed by the SDAC and the instructor and staff are not informed about this in advance, this prevents us from helping during the semester, and it is unfair to request special considerations at the end of the term or a?er work is completed. So we request you inform the instructor as early in the term as possible your circumstances. If you have other special circumstances (athletics, other university-related activities, etc.) please contact your instructor and/or TA as soon as you know these may affect you in class."
  },
  {
    "objectID": "topics/oreilly-accounts.html",
    "href": "topics/oreilly-accounts.html",
    "title": "Setting Up O’Reilly",
    "section": "",
    "text": "O’Reilly for Higher Education contains books on all aspects of computers, programming and the Web from such publishers as O’Reilly, Sams, New Riders, Adobe. Students can access content for free.\nFollow these instructions to set up your account:\nGo to https://www.oreilly.com/library/view/temporary-access/.\nYou should see this dialog box:\n\nClick on Institution not listed? This will produce the following dialog box:\n\nIf you are first time user, enter your UVA email address and clicl on the big red button.\nThis should produce the following message:\n\nNow you can access all the books in the collection. When you return, click on Already a user? in the second dialog box."
  },
  {
    "objectID": "modules/m01/m01-intro.html#topics",
    "href": "modules/m01/m01-intro.html#topics",
    "title": "M01 Getting Started",
    "section": "Topics",
    "text": "Topics\n\nIntroduce the course\nAccess Rivanna\nExplore the Unix command line\nExplore use of Git and GitHub"
  },
  {
    "objectID": "modules/m01/m01-intro.html#outcomes",
    "href": "modules/m01/m01-intro.html#outcomes",
    "title": "M01 Getting Started",
    "section": "Outcomes",
    "text": "Outcomes\n\nBecome familiar with UVA’s compute resources Rivanna\nBecome familiar with the command line, e.g. bash\nKnow the difference between Git and GitHub\nKnow how to fork and clone a repository for personal use\nKnow how to push content to a repository that you own\nKnow how to make a pull request to a repository that you don’t own"
  },
  {
    "objectID": "topics/rivanna.html#introduction",
    "href": "topics/rivanna.html#introduction",
    "title": "About Rivanna",
    "section": "Introduction",
    "text": "Introduction\nA useful infrastructural resource for this course is Rivanna, UVA’s high-performance computing (HPC) cluster. Each student has an account on Rivanna and access to resources there based on participation in this course. We will use Rivanna in our class for both Python and R. \nThis page describes some of the tools available for your use in this course. For information about Rivanna, see this introduction. Resources for getting help, including a knowledge base and ticket system, are found at the Support Option’s Page on UVA’s Research Computing website.\nYou may need to use VPN to access Rivanna from an off-grounds location. To install VPN on your computer, go to the ITS VPN page for instructions. Note that you should connect to “UVA Anywhere,” not to any of the higher security options. Course Allocation\nThis course has been allocated compute and space resources on Rivanna. The names of the resources are given below. The allocation ID needs to be entered to access certain tools. The storage path is accessible to you on the remote server.\n\nAllocation ID: msds_ds5100\nStorage path: /project/MSDS_DS5100  (Don’t use unless directed to.)"
  },
  {
    "objectID": "topics/rivanna.html#tools",
    "href": "topics/rivanna.html#tools",
    "title": "About Rivanna",
    "section": "Tools ",
    "text": "Tools \nUVA Research Computing provides you with a suite of tools to access Rivanna. These tools are accessible through the menu on the UVA OpenOnDemand Dashboard page. Below are some brief descriptions of the tools.\nFile Explorer. A web-based GUI to access the file system of the remote server. Can be used to create, move, and delete directories and files, and to edit the contents of files (see Editor). You can also upload and download files through this interface. The File Explorer is useful to view your remote content and manage files and directories without having to use the command line. Note that not all operations can be performed through this interface.\nFind under “Files” in the menu. \nEditor. A web-based text editor launched from the File Explorer to view and edit text files on the remote server.  Although not as sophisticated as VS Code (below), this is very useful for editing data and code files without having to use a command line editor. One advantage over VS Code is that it does not need to be launched – which means it does not time out like the Interactive Apps listed below.\nThe Editor is launched from the File Explorer.\nSSH Shell Access (Terminal). Access to the command line of the remote server.  Use this to open a terminal window to perform Linux commands directly.  Note that It is necessary to use a terminal to install and run certain programs on the remote server.\nFind under “Clusters” in the menu. \nYou can also access the remote command line via SSH on your local computer. Just enter the following on the command line of either a PC or Mac:\nssh -Y <userid>@hpc.rivanna.virginia.edu\nReplace <userid> with your UVA Net ID, e.g. abc2x. \nBe suer to be running VPN if you are accessing Rivanna from an off-grounds location."
  },
  {
    "objectID": "topics/rivanna.html#interactive-spps",
    "href": "topics/rivanna.html#interactive-spps",
    "title": "About Rivanna",
    "section": "Interactive Spps",
    "text": "Interactive Spps\nThese tools must be launched by specifying a set of parameters, including the allocation you are using. They are also timed and will close when time is up. Be sure to give yourself enough time when launching these, and to be aware of how much time you have when working.\nNote also that you should allocate the fewest resources necessary to do the work you plan to do. This saves resources on the remote host, but also allows your app to launch more quickly. If you ask for an excessive amount of resources, you may wait a long time (e.g. hours) to have your app launched.\nDesktop. Access to a GUI desktop to the remote server. This provides a access to various applications on the server, including a web browser, a file explorer, and terminal windows.  Using this is not necessary if you can get by with the tools listed above.\nFind under “Interactive Apps > Desktop” in the menu.\nVS Code. Access to Visual Studio Code on the remote server. This is a fully functional instance of the IDE.\nFind under “Interactive Apps > Code Server” in the menu.\nJupyter. Access to Jupyter Lab on the remote server. Find under “Interactive Apps > Jupyter Lab” in the menu.\nRStudio. Access to Jupyter Lab on the remote server.\nFind under “Interactive Apps > RStudio Server” in the menu."
  },
  {
    "objectID": "topics/rivanna.html#for-more-information",
    "href": "topics/rivanna.html#for-more-information",
    "title": "About Rivanna",
    "section": "For More Information",
    "text": "For More Information\nUVA’s Research Computing unit provides resources for learning how to use Rivanna. Here are two slide decks that you may find useful:\n\nIntroduction to Rivanna\nUsing Rivanna from the Command Line"
  },
  {
    "objectID": "topics/unix.html#introduction",
    "href": "topics/unix.html#introduction",
    "title": "Using Unix",
    "section": "Introduction",
    "text": "Introduction\nThe Unix family of operating systems provide users with a command line interface (CLI) to execute commands and get things done. They also, typically provide GUIs but we won’t go into those here.\nThe Unix family includes all varieties of Linux and the Mac OS (which is based on FreeBSD).\nThe command line that you actually interact with – the set of commands available to you – is called a shell, and there are several shells that you can run on your system. The most typical shell in use today is called bash which stands for Bourne Again Shell, since it is an improved version of bsh (The Bourne Shell). New versions of MacOS use the Z shell (zsh). The commands in these two shells are mostly similar, but there are subtle differences.\nWindows has shells too for its command line interface. The default shell is DOS, but is also has PowerShell  as an advanced (and very capable) option.\nFor more information, check out these resources:\n\nUVA Research Computing’s Unix tutorial.\nNewham, 2005, Learning the bash Shell, O’Reilly Media.\nJeroen Janssens, 2021, Data Science From the Command Line, O’Reilly Media.\nNeal Stephenson, 1999, In the Beginning Was The Command Line. (PDF version.)"
  },
  {
    "objectID": "topics/unix.html#basic-commands",
    "href": "topics/unix.html#basic-commands",
    "title": "Using Unix",
    "section": "Basic Commands",
    "text": "Basic Commands\nIn this course, you don’t need to know very many Unix shell commands, but you should be comfortable working from the command line to perform basic tasks. This is because some things can only be performed from the command line, such as installing some essential software. Here is a list of basic commands.\nNavigating filesystems and managing directories:\n\ncd – change directory\npwd – show the current directory\nln – make links and symlinks to files and directories\nmkdir – make new directory\nrmdir – remove directories in Unix\n\nNavigating filesystem and managing files and access permissions:\n\nls – list files and directories\ncp – copy files (work in progress)\nrm – remove files and directories (work in progress)\nmv – rename or move files and directories to another location\nchmod – change file/directory access permissions\nchown – change file/directory ownership"
  },
  {
    "objectID": "topics/unix.html#text-file-commands",
    "href": "topics/unix.html#text-file-commands",
    "title": "Using Unix",
    "section": "Text file commands",
    "text": "Text file commands\nMost of important configuration in Unix is in plain text files, these commands will let you quickly inspect files or view logs:\n\ncat – concatenate files and show contents to the standard output\nmore – basic pagination when viewing text files or parsing Unix commands output\nless – an improved pagination tool for viewing text files (better than more command)\nhead – show the first 10 lines of text file (you can specify any number of lines)\ntail – show the last 10 lines of text file (any number can be specified)\ngrep – search for patterns in text files"
  },
  {
    "objectID": "topics/unix.html#miscellaneous",
    "href": "topics/unix.html#miscellaneous",
    "title": "Using Unix",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nclear – clear screen\nhistory – show history of previous commands"
  },
  {
    "objectID": "topics/unix.html#command-line-cool",
    "href": "topics/unix.html#command-line-cool",
    "title": "Using Unix",
    "section": "Command Line Cool",
    "text": "Command Line Cool\nAlthough we will not be using the command line to this degree, you should know that it is a powerful environment for doing data science work. The book Data Science from the Command Line makes the case for using the command line to perform many tasks that we often perform with more resource intensive (i.e. bloated) tools such as Python and R.  At some point in your early DS career, you may want to look at this. The book itself is also a great introduction to data science!\n\nOne last thing – for fun you may want to read Neal Stephenson’s “In the Beginning Was The Command Line”, a kind of cyberpunk history of the topic. Stephenson, by the way, is the author who coined the term “metaverse” in the novel Snowcrash."
  },
  {
    "objectID": "topics/setting-up-ssh.html#overview",
    "href": "topics/setting-up-ssh.html#overview",
    "title": "SSH for GitHub",
    "section": "Overview",
    "text": "Overview\n\nThis method will allow you to interact with your repos hosted on GitHub without having to enter your login credentials each time.\nYou will create an SSH key on your local machine. By “local machine,” we mean the machine where you will be working and pulling to, e.g your laptop or Rivanna. In other words, it’s local relative to GitHub.\nSSH keys have a public and private component. These are hash strings that are stored in files. Both will be generated on your machine.\nYou will copy and paste the generate public key to your GitHub account.\nGoing forward, you will clone from your account using the SSH protocol."
  },
  {
    "objectID": "topics/setting-up-ssh.html#steps",
    "href": "topics/setting-up-ssh.html#steps",
    "title": "SSH for GitHub",
    "section": "Steps",
    "text": "Steps\n\nPart A\nOn your local machine\nGet to the command line (i.e. the shell).\n\nOn a Mac, open Terminal.\nIf you are on Windows and you have admin rights, first install git-bash. Otherwise try to access the Linux subsystem.\nOn Rivanna, either connect via SSH or use Rivanna Shell Access (under Clusters).\n\nMove into your root directory and enter cd.\nGenerate the key.\n\nEnter: ssh-keygen -t ed25519 -C \"your_email_id@example.com\", using your email address.\nBe sure to use the email address associated with your GitHub account in the above command.\n\nAt the prompt, type in a secure passphrase.\n\nYou don’t have to do this, but it is advised.\nCreate a memorable sentence.\nA good passphrase should have at least 15, preferably 20 characters and be difficult to guess. It should contain upper case letters, lower case letters, digits, and preferably at least one punctuation character.\n\nAdd the key to ssh-agent.\n\nEnter: eval \"$(ssh-agent -s)\"\nEnter: ssh-add ~/.ssh/id_ed25519\n\nIf you’re using macOS Sierra 10.12.2 or later, you will need to modify your ~/.ssh/config file to automatically load keys into the ssh-agent and store passphrases in your keychain. Follow the instructions here (at step 2).\n\n\nPart B\nOn your GitHub account\nGet the public key that was just generated.\n\nEnter: more ~/.ssh/id_ed25519.pub\nCopy the result to your clipboard (e.g. by blocking off the line and entering Ctrl-C).\nThe key should begin ssh-ed25519 and end with the email address you used in generating the key. In between it will have a long string of alphanumeric characters.\n\nOn GitHub, go to your account settings and select “SSH and GPG Keys” from the side menu.\n\nA link to your account settings can be found in the drop-down list produced by clicking on your user icon in the upper right of the website.\n\nUnder “SSH keys,” press the “New SSH Key” button.\n\nAdd a brief title describing the context of the key, i.e. the local machine where it was generated, e.g. Rivanna.\nChoose “Authentication Key” as the Key type.\nPaste the key into the Key text area.\nSubmit the form by pressing “Add SSH key.”\n\nYou are now good to go. Whenever you clone a site from your GitHub account, choose the SSH link."
  },
  {
    "objectID": "topics/setting-up-ssh.html#information-sources",
    "href": "topics/setting-up-ssh.html#information-sources",
    "title": "SSH for GitHub",
    "section": "Information Sources",
    "text": "Information Sources\n\nAbout SSH\nGenerate the key\nAbout pass phrases\nAdding the key to GitHub\nUpdating repos with SSH"
  },
  {
    "objectID": "topics/git-and-github.html#introduction",
    "href": "topics/git-and-github.html#introduction",
    "title": "Git and GitHub",
    "section": "Introduction",
    "text": "Introduction\nGit and GitHub are two tools that work together, but it is important to understand what each does and how they are different to each other.\nHere are some basic things to know:\n\nGit is a stand-alone version control system that runs on a variety of platforms, including Linux, MacOS, and Windows.\nGitHub is a company that offers a cloud-based Git repository hosting service that makes it easy to use Git for version control, collaboration, and sharing code. This service is offered through a website.\nThere are other Git hosting services out there, including GitLab, and open source tool that can be installed on a local server.\nGitHub builds on top of Git and adds some functionality to it, while Git can interact with GitHub through actions like cloning, pushing, and pulling. However, Git does not require GitHub to function.\nGit does not have a fork command. GitHub (and other hosting services such as GitLab) have added this command as a convenient way to copy repositories."
  },
  {
    "objectID": "topics/git-and-github.html#using-git-and-github-together",
    "href": "topics/git-and-github.html#using-git-and-github-together",
    "title": "Git and GitHub",
    "section": "Using Git and GitHub Together",
    "text": "Using Git and GitHub Together\n\n\n\nXKCD #1597\n\n\nSource\nA basic series of actions one continually makes with Git are the following:\n\n\n\nAction\nDescription\nCommand\n\n\n\n\nFork\nForking a repo makes a copy of someone else’s repo in your GitHub account, which you can now modify. Note: Forking does not have to be performed if you are not interested in altering the code. You can clone it directlty.\nThis is done through GitHub’s web interface by clicking on the Fork button.\n\n\nClone\nCloning the repo to a workspace to which you have access, whether a local machine or a remote resource (e.g. Rivanna).\ngit clone <repo>\n\n\nAdd\nCreating or editing a file locally and then adding it to the list of files git will keep track of.\ngit add <filename>Note that you may use wildcards here, e.g. *, to add more than one file at a time.\n\n\nCommit\nCommitting the changes made to the file by adding them to the repo’s database of changes. This is accompanied by a brief, descriptive message of the changes made.\ngit commit -m \"What you did\"\n\n\nPush\nPushing the changes to the remote repo that you cloned from. This uploads both the files and the database changes to the repo.\ngit push\n\n\nPull\nPulling, i.e. downloading, any changes that have been made to the remote repo to your local repo. This usually happens if you are working in teams on the same project.\ngit pull\n\n\nPull Request\nThis is a request made to the owner of the original repo to pull in the changes you’ve made to your forked copy.\nThis is done through GitHub’s web interface. Read the docs. \n\n\nFetch Upstream\nThis refreshes the content of your forked repo with the content from the original repo.\nThis is done through GitHub’s web interface. Read the docs. \n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is not the only pattern to use with Git. Here is another — the Git Fork-Branch-Pull Workflow\n\n\nHere is a visualization of the process:\n\n\n\nDiagram of common git workflow\n\n\nIn this diagram, the dashed lines refer to actions performed only once for a give repo. Forking and cloning are done to acquire a repo, while fetch upstream (aka sync fork) and pull requests on the GitHub server, and pull/push on your local machine, are done repeatedly as you develop and share code.\nNote also that the here “Remote workstation” may be confusing; it means remote relative to your laptop, e.g. Rivanna, which we sometimes call local relative to the GitHub repo. In any case, note that these two copies of the same repo do not communicate with each other directly, but rather through their common relationship with the GitHub hosted instance of the repo."
  },
  {
    "objectID": "topics/git-and-github.html#to-learn-more",
    "href": "topics/git-and-github.html#to-learn-more",
    "title": "Git and GitHub",
    "section": "To Learn More",
    "text": "To Learn More\n\nVideos\nBook"
  },
  {
    "objectID": "modules/m01/m01-using-rivanna.html",
    "href": "modules/m01/m01-using-rivanna.html",
    "title": "Activity: Using Rivanna",
    "section": "",
    "text": "After reading the previous documents on Rivanna and Unix, try to complete this activity before class.\nTo get started, go to OpenOnDemand Dashboard page and from the main menu select Clusters → Rivanna Shell Access.\nThis should open a terminal to what is called the “shell” of the operating system.\n\n\n\nScreenshot of Rivanna shell\n\n\nRivanna uses Linux, a member of the Unix family of operating systems. Many cloud resources use Linux.\nUnderstanding how to do work from the command line on such systems is an essential skill of the data scientist.\nIf you have never used the command line, have no fear! Just enter the commands exactly as shown and ask questions in the Teams chat if you are stuck.\nNow, create a directory for your course and this course by entering the following commands:\ncd Documents \nmdkir MSDS \ncd MSDS \nmkdir DS5100 \ncd DS5100\nIf the Documents directory does not exist, create that first using the mkdir command.\n\ncd means “change directory,” and is a basic Unix command.\nmkdir means “make directory.” It’s also a basic Unix command.\n\nNote that you can use the tab key to complete path and command names as you type.\nYou don’t have to, but it would be a good idea to create subdirectories for any of your courses that use Rivanna.\nMore information about Unix shell commands can be found the document Unix Shell Commands."
  },
  {
    "objectID": "modules/m01/m01-activity-github.html#introduction",
    "href": "modules/m01/m01-activity-github.html#introduction",
    "title": "Activity: Using Git and GitHub",
    "section": "Introduction",
    "text": "Introduction\nDuring the technical orientation, you set up a GitHub account.\nYou also spent a little time browsing a sample repository, which you may wish to revisit:\n\nhttps://github.com/UVADS/orientation-technical\n\nYou also should be able check off the following items:\n\nUnderstand the difference between Git and GitHub.\nUnderstand the purpose of Git and Github for data science work.\nEnsure Git is installed on your computer.\nUnderstand how to find a repository on GitHub.\n\nLet’s apply and extend this knowledge now with our course repo.\nBe sure you are inside the course directory we created earlier.\nAlso, we assume you have already created a GitHub account. å Fork the course GitHub hosted repository (“repo”) to your GitHub account.\nGo to https://github.com/ontoligent/DS5100-2023-07-R in your web browser.\n\n\n\n\n\n\nNote\n\n\n\nThis is the course repo — all of the course notebooks and other code will be available here. Each week, you will access your course materials here.\n\n\nClick on the Fork icon in the upper right and follow the prompts to finish the process.\nYou should end up at the web page of your newly forked repo.\nYou will now have a copy of the repo in your GitHub account.\nClone the forked repo for this course inside of your course directory on Rivanna.\nFind the green Code button and click on it. You should see something like this:\n\nMake sure you have selected the SSH option.\n\n\n\n\n\n\nImportant\n\n\n\nNote: This requires that you have SSH set up.\n\n\nThen click on the copy icon and paste the value into the following command:\ngit clone https://github.com:<github_user_name>/DS5100-2023-07-R.git\n\n\n\n\n\n\nImportant\n\n\n\nBe sure to clone the repo from your GitHub account, replacing <github_user_name> with your GitHub user name. Do not just cut-and-paste the line above!\n\n\nYou now have a copy the course repo to your account on Rivanna.\nThis will be the directory you created in your pre-class activities under Documents/.\nCreate a new file in your newly cloned repo.\nGo to your command line window on Rivanna.\nUse cd to move into the directory just created by the clone operation.\nMove into the directory lessons/M01_GettingStarted/hello\n\n\n\n\n\n\nImportant\n\n\n\nMake sure you are in this directory before proceeding.\n\n\nIf you get lost – for example if you moved around the file system before this step – you can cd to the absolute path:\ncd ~/Documents/MSDS/DS5100/DS5100-2023-07-R/lessons/M01_GettingStarted/hello \nNote that the tilde sign ~ stands for the path to your home directory.\nUsing the file editor on Rivanna, create and save new file called <userid>_hello.txt, replacing <userid> with your actual user ID, e.g. rca2t_hello.txt.\nIn the file, introduce yourself by answering the question: What is the most recent film you watched and enjoyed?\nSave the file.\nAdd and commit the changes you made.\nNow do the following:\ngit add <userid>_hello.txt\ngit commit -m \"Created file for class\"\nPush your new file to the repo on GitHub.\nSince you have SSH set up, you can issue the following command without having to enter a password:\n\ngit push\n\n\nCreate a Pull Request\nFinally, make a pull request to have your file added to the original site. To do this, follow these steps:\nClick on the “Pull requests” menu item (see image below) on the web page for your repo.\n\n\n\nImage of pull request button on GitHub\n\n\nClick on the green “New pull request” button.\nClick on the green “Create pull request” button.\nGive the request the title “In-class activity” and then press the green “Create pull request” button at the bottom of the form.\nNow the ball is in the instructor’s court to merge the request with the original. If you put your file in the right place and named it properly, it will be merged."
  },
  {
    "objectID": "modules/m01/m01-activity-github.html#going-forward",
    "href": "modules/m01/m01-activity-github.html#going-forward",
    "title": "Activity: Using Git and GitHub",
    "section": "Going Forward",
    "text": "Going Forward\nDuring the semester, you will not be making pull requests to submit your work. We do it here to demonstrate the concept since it is so basic to working with GitHub in the real world.\nInstead of making pull requests, you will be using a separate repository for your work So, you will be working with two repositories going forard:\n\nThe Course Repo, which is where you will get course materials.\nYour Assessments Repo, which is where you will be your finished work as assigned."
  },
  {
    "objectID": "modules/m02/m02-intro.html#topics",
    "href": "modules/m02/m02-intro.html#topics",
    "title": "M02 Introducing Python",
    "section": "Topics",
    "text": "Topics\n\nRunning Python code.\nPython’s basic data types.\nPython’s primary operators associated with each data type.\nPython’s built-in data structures."
  },
  {
    "objectID": "modules/m02/m02-intro.html#outcomes",
    "href": "modules/m02/m02-intro.html#outcomes",
    "title": "M02 Introducing Python",
    "section": "Outcomes",
    "text": "Outcomes\n\nRun Python from the command line on Rivanna.\nCreate and run a Jupyter Notebook on Rivanna.\nDescribe the difference between data from the perspective of data science versus computer science.\nKnow the primary data types in Python and their basic operators.\nKnow the built-in list-like data structures in Python and the basic methods and functions associated with them."
  },
  {
    "objectID": "modules/m02/m02-intro.html#readings",
    "href": "modules/m02/m02-intro.html#readings",
    "title": "M02 Introducing Python",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nKatz and Katz 2019, Section 1, Preparing the Workspace\n\n\nLutz, Learning Python, Part I: Getting Started, Chapter 2\n\n\nLutz, Learning Python, Part I: Getting Started, Chapter 3\n\n\nLutz, Learning Python, Part II: Types and Operations, Chapters 4–9\n\n\n\n\nOptional\n\n\nKatz and Katz 2019, Section 1, First Steps in Coding - Variables and Data Types\n\n\nBuilt-in Types (Official)\n\n\nPython Data Types (GFG)\n\n\nPython Operators (W3S)\n\n\nImmutable vs Mutable Data Types in Python (Medium)"
  },
  {
    "objectID": "topics/on-data.html#code-should-be-simple",
    "href": "topics/on-data.html#code-should-be-simple",
    "title": "Data and Code",
    "section": "Code should be simple",
    "text": "Code should be simple\nAn important principle for writing effective and intelligible code is that code should be simple — to quote Einstein, as simple as possible but no simpler.\n\nA contributing factor to code simplicity is how it is related to the data it is designed to process.\nThis relationship depends largely on how the data are structured.\nA program is always written with data in mind — what kind of data it is and how it is structured."
  },
  {
    "objectID": "topics/on-data.html#simplicity-of-code-follows-from-the-structure-of-data",
    "href": "topics/on-data.html#simplicity-of-code-follows-from-the-structure-of-data",
    "title": "Data and Code",
    "section": "Simplicity of code follows from the structure of data",
    "text": "Simplicity of code follows from the structure of data\nThere is a view among programmers which, although not orthodoxy, is commonplace.\n\nIt is the idea that the complexity of a program — its algorithms — is a function of the quality of the data structure it processes.\nIf a data structure is not well designed, algorithms may be excessively complex and hard to understand.\nHowever if a data structure is well designed, the algorithms that process them are more robust and intelligible."
  },
  {
    "objectID": "topics/on-data.html#supporting-references",
    "href": "topics/on-data.html#supporting-references",
    "title": "Data and Code",
    "section": "Supporting References",
    "text": "Supporting References\nConsider these quotes cited in an essay on Data Structures. by Igor Budasov, reproduced here:\nHere’s a quote from Linus Torvalds in 2006:\n\nI’m a huge proponent of designing your code around the data, rather than the other way around, and I think it’s one of the reasons git has been fairly successful . . . I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his [sic] code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\n\nWhich sounds a lot like Eric Raymond’s “Rule of Representation” from 2003:\n\nFold knowledge into data, so program logic can be stupid and robust.\n\nWhich was just his summary of ideas like this one from Rob Pike in 1989:\n\nData dominates. If you’ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.\n\nWhich cites Fred Brooks from 1975:\n\nRepresentation is the Essence of Programming\n\nBeyond craftsmanship lies invention, and it is here that lean, spare, fast programs are born. Almost always these are the result of strategic breakthrough rather than tactical cleverness. Sometimes the strategic breakthrough will be a new algorithm, such as the Cooley-Tukey Fast Fourier Transform or the substitution of an n log n sort for an n 2 set of comparisons.\n\n\nMuch more often, strategic breakthrough will come from redoing the representation of the data or tables. This is where the heart of your program lies. Show me your flowcharts and conceal your tables, and I shall be continued to be mystified. Show me your tables, and I won’t usually need your flowcharts; they’ll be obvious."
  },
  {
    "objectID": "topics/python-object-types.html",
    "href": "topics/python-object-types.html",
    "title": "Python Object Types",
    "section": "",
    "text": "Python is organized into a hierarchy of object types. Sometimes, these are just call types.\nObjects are the basic unit out of which the language is constructed.\nWe’ll learn about objects later – what they are and how to create your own – but for now just understand that they have two main things associated with them:\n\nFirst, they can contain data.\nSecond, they can have behaviors, frequently in relation to the data they contain.\n\nData types and data structures are kinds of objects."
  },
  {
    "objectID": "modules/m02/m02-activity-hello-world.html#the-python-interactive-shell",
    "href": "modules/m02/m02-activity-hello-world.html#the-python-interactive-shell",
    "title": "Activity: Hello, World!",
    "section": "The Python Interactive Shell",
    "text": "The Python Interactive Shell\nLog onto the Rivanna shell and move into in the course directory you created for this class.\nFrom the command line, enter python\nYou should get the Python Shell:\n\nThis is also called the Python standard REPL, which stands for “Read-Eval-Print Loop”.\nMake sure you see that you are using version 3 of Python.\nIf you see Python 2, exit the shell by entering quit() and try again by entering python3 at the command line.\nAt the >>> prompt type print(\"Hello, World!\") and press return.\nIf you’ve never used Python, you’ve just completed an important ritual. If you have used Python, well, you did it again :-)\nTo exit the Python Shell, enter quit() or exit() and hit return."
  },
  {
    "objectID": "modules/m02/m02-activity-hello-world.html#python-files",
    "href": "modules/m02/m02-activity-hello-world.html#python-files",
    "title": "Activity: Hello, World!",
    "section": "Python Files",
    "text": "Python Files\nNow create a file called hello.py using the command line editor nano.\nThen run it from the command line by directly invoking the Python interpreter python."
  },
  {
    "objectID": "modules/m02/m02-activity-jupyter-lab-on-rivanna.html",
    "href": "modules/m02/m02-activity-jupyter-lab-on-rivanna.html",
    "title": "Activity: Jupyter Lab",
    "section": "",
    "text": "Now that we have run Python on Rivanna from the command line, let’s try it using a Jupyter Notebook.\nGo the OnDemand site to access Rivanna. As a reminder, the URL is https://rivanna-portal.hpc.virginia.edu/.\nFrom the Interactive Apps menu, select JupyterLab and fill out the form to initiate a new session.\nRemember to select just the resources needed and to enter our course allocations (msds_ds5100).\nOnce the session is ready, launch the notebook.\nOnce you are in the notebook, use file system tab on the left to get to the directory of your personal assessments repo. Remember, you created two repos for this class – one for course content from the instructor, and one for your own course work. Use the latter for this exercise.\nIn a code cell in the notebook, enter the code to print \"Hello, World!\", and run the cell.\nSave your notebook as hello-world.ipynb."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "",
    "text": "Python Data Types\nWe declare a number of variables with different value types.\nBy ‘type’ we mean object type.\nData types and data structures are both types of object.\nData types are created by the way they are written or as keywords …\nHere is a series of literal values (called literals):\nIntegers\nFloats (decimals)\nStrings\nType of quote does not matter, but they must be straight quotes, not “smart quotes” that some word processors use.\nNote that there is no explicit character type as in Java and other languages.\nBoolean\nNothing\nIt evaluates to nothing!\nComplex\nFor the physicists and signal processors.\nYou can always find out what kind of type you are working with by calling the type() function.\nData are assigned to variables using the assignment operator =.\nThe variable is always on the left, the value assigned to it on the right.\nThis is not the same as mathemtical equality.\nVariables are assigned types dynamically.\nThis is in contrast to static typing, where you have define variables by asserting what kind of data values they can hold.\nPython figures out what type of data is being set to the variable and implicitly stores that info.\nNote that type() returns the type of the value that a variable holds, not the type “variable”.\nYou can’t delete values!\nThis function returns the identity of an object.\nThe identity is a number that is guaranteed to be unique and constant for this object during its lifetime (during the program session).\nYou can think of it as the address of the object in memory.\nIt is possible to convert between types (when it makes sense to do so).\nSometimes conversions are “lossy” – you lose information in the process\nIf variables are nouns, and values meanings, then operators are verbs.\nIn effect, they are elementary functions that are expressed in sequential syntax.\na + b could have been expressed as add(a, b).\nBasically, each data type is associated with a set of operators that allow you to manipulate the data in way that makes sense for its type. Numeric data types are subject to mathematical operations, booleans to logical ones, and so forth.\nThere are also operations appropriate to structures. For example, list-like things have membership.\nThe relationship between types and operators is a microcosm of the relationship betweed data structures and algorithms. Data structures imply algorithms and algorithms assume data structures.\nThe w3schools site has a good summary.\nHere are some you may not have seen.\nPython offers a short-cut for most operators. When updating a variable with an operation to that variable, such as:\nYou can do this:\nPython supports many operators this way. Here are some:\nVariables, literal values, and operators are the building blocks of ebxpressions.\nFor example, the following combines three operators and four variables:\nPython employs operator precedence when evaluating expressions:\nYou can use parentheses to group them to force the order of operations you want:\nVariables and literal values can be combined:\nExpresssion can be very complex.\nExpressions evaluate to a value, just as single variables do.\nTherefore, they can be put anywhere a value is accepted."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#int",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#int",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "int()",
    "text": "int()\n\nint?\n\nInit signature: int(self, /, *args, **kwargs)\nDocstring:     \nint([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4\nType:           type\nSubclasses:     bool, IntEnum, IntFlag, _NamedIntConstant\n\n\nFloat to Int\n\nval = 3.8\nprint(val, type(val))\n\n3.8 <class 'float'>\n\n\n\nval_int = int(val)\nprint(val_int, type(val_int))\n\n3 <class 'int'>\n\n\nString to Float\n\nval = '3.8'\nprint(val, type(val))\n\n3.8 <class 'str'>\n\n\n\nval_int = float(val)\nprint(val_int, type(val_int))\n\n3.8 <class 'float'>\n\n\nConverting string decimal to integer will fail:\n\nval = '3.8'\nprint(val, type(val))\n\n3.8 <class 'str'>\n\n\n\nval_int = int(val)\nprint(val_int, type(val_int))\n\nValueError: invalid literal for int() with base 10: '3.8'"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#ord",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#ord",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "ord()",
    "text": "ord()\nConverting a character to it’s code point\n\nord?\n\nSignature: ord(c, /)\nDocstring: Return the Unicode code point for a one-character string.\nType:      builtin_function_or_method\n\n\n\nord('a'), ord('A')\n\n(97, 65)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#arithmetic-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#arithmetic-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\n\nfloor division //\n\n5 // 2\n\n2\n\n\n\n-5 // 2\n\n-3\n\n\n\n5.5 // 2\n\n2.0\n\n\n\n\nmodulus %\nReturns the remainder\n\n5 % 2\n\n1\n\n\nodd integers % 2 = 1\neven integers % 2 = 0\nLook at this …\n\n5.5 / 2, 5.5 // 2, 5.5 % 2\n\n(2.75, 2.0, 1.5)\n\n\n\n\nexponentiation **\n\n5**3\n\n125"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#string-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#string-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "String Operators",
    "text": "String Operators\n\nconcatenation +\nThe plus sign is an ovderloaded operator in Python.\n\nmyString = 'This: '\n\n\nmy2ndString = myString + ' Goodbye, world!'\n\n\nmy2ndString\n\n'This:  Goodbye, world!'\n\n\n\n\nrepetition *\n\nmyString*2                     \n\n'This: This: '\n\n\n\nmyString * 5\n\n'This: This: This: This: This: '\n\n\n\nbart_S1E3 = 'I will not skateboard in the halls'\n\n\nprint((bart_S1E3 + '\\n') * 5)\n\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\n\n\n\n\nprint('-' * 80)\n\n--------------------------------------------------------------------------------\n\n\nSee them all :-)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#assignment-operator",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#assignment-operator",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Assignment Operator =",
    "text": "Assignment Operator =\nWe’ve used this already, but it too is an operator.\n\nepoch = 20\nprint('epoch:', epoch)\n\nepoch: 20"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#comparison-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#comparison-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Comparison Operators",
    "text": "Comparison Operators\nComparisons are questions.\nThey return a boolean value.\n\nequality ==\n\n0 == (10 % 5)\n\nTrue\n\n\n\n'Boo' == 'Hoo'\n\nFalse\n\n\nCan we compare strings\n\n'A' < 'B'\n\nTrue\n\n\n\nord('A'), ord('B')\n\n(65, 66)\n\n\n\n\ninequality !=\n\n5/9 != 0.5555\n\nTrue"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#logical-operators",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#logical-operators",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Logical Operators",
    "text": "Logical Operators\nPython uses words where other languages will use other symbols.\n\nConjunctions and, or, not\nNote the we group comparisons with parentheses.\n\nx = 10\n\n(x % 10 == 0) or (x < -1)\n\nTrue\n\n\n\n(x % 10 == 0) and (x < -1)\n\nFalse\n\n\n\nnot x == 5\n\nTrue\n\n\n\n\nIdentity is\nThe is keyword is used to test if two variables refer to the same object.\nThe test returns True if the two objects are the same object.\nThe test returns False if they are not the same object, even if the two objects are 100% equal.\nUse the == operator to test if two variables are equal.\n– from W3Schools on Identity Operators\nis\n\nx = 'fail'\n\n\nx is 'fail'\n\n<>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n<>:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_53814/1139635342.py:1: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n  x is 'fail'\n\n\nTrue\n\n\nis not\n\nx is not 'fail'\n\n<>:1: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n<>:1: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_53814/1754352910.py:1: SyntaxWarning: \"is not\" with a literal. Did you mean \"!=\"?\n  x is not 'fail'\n\n\nFalse\n\n\n\nx = 'foo'\ny = 'foo'\nx is y\n\nTrue\n\n\n\nx = ['a']\ny = ['a']\nx is y\n\nFalse\n\n\n\n\nNegation not\n\nnot True, not False, not 0, not 1, not 1000, not None\n\n(False, True, True, False, False, True)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html",
    "title": "NB: Numbers",
    "section": "",
    "text": "Built-in Functions\nThese are built-in mathematical functions for numbers.\nSee the Python docs on the math library.\nSee random — Generate pseudo-random numbers for more info."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#pow-power",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#pow-power",
    "title": "NB: Numbers",
    "section": "pow() Power",
    "text": "pow() Power\n\npow(2,3) # 2 raised to 3 = 8"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#abs-absolute-value",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#abs-absolute-value",
    "title": "NB: Numbers",
    "section": "abs() Absolute value",
    "text": "abs() Absolute value\n\nabs(-2) # returns 2, the absolute value of its argument"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#round-round",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#round-round",
    "title": "NB: Numbers",
    "section": "round() Round",
    "text": "round() Round\nRounding up or down its argument (to closest whole number).\n\nround(2.8) # rounds up to 3.0\n\n3\n\n\n\nround(1.1) # rounds down to 1.0\n\n1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.sqrt-square-root",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.sqrt-square-root",
    "title": "NB: Numbers",
    "section": "math.sqrt() Square root",
    "text": "math.sqrt() Square root\n\nmath.sqrt?\n\nSignature: math.sqrt(x, /)\nDocstring: Return the square root of x.\nType:      builtin_function_or_method\n\n\n\n# sqrt(intOne)\n\n\nmath.sqrt(12) # using the square-root function from the math library\n\n3.4641016151377544\n\n\n\nprint(math.floor(2.5)) # returns largest whole number less than the argument\nprint(math.floor(2.9))\nprint(math.floor(2.1))\n\n2\n2\n2"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.log",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.log",
    "title": "NB: Numbers",
    "section": "math.log()",
    "text": "math.log()\n\nmath.log?\n\n\nmath.log(100, 10)\n\n\nmath.log(256, 2)"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.random",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.random",
    "title": "NB: Numbers",
    "section": "random.random()",
    "text": "random.random()\n\nrandom.random?\n\n\nprint(random.random()) # using random() function in random library\n    # will return a number between 0 and 1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.randint",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.randint",
    "title": "NB: Numbers",
    "section": "random.randint()",
    "text": "random.randint()\n\nrandom.randint?\n\n\nprint(random.randint(1,100)) # specify a range in the parenthesis\n    # this will return a random integer in the range 1-100"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-03-Booleans.html",
    "href": "notebooks/M02_BasicPython/M02-03-Booleans.html",
    "title": "NB: Booleans",
    "section": "",
    "text": "A boolean value takes one of True or False, which are built-in values\ncheck if cache is True, using if statement\nif statement using a bool evaluates to True or False\n\ncache = True\n\nif cache:\n   print('data will be cached')\n\ndata will be cached\n\n\n\nprint(type(cache))\n\n<class 'bool'>\n\n\nBooleans are frequently used in if/then statements.\nWe’ll cover these later.\n\ncache = True\noome = False\n\nif cache or oome:\n    print('condition met!')\nelse:\n    print(\"No dice.\")\n\nAND statements will short circuit if an early condition fails.\n\nif oome and cache:\n    print('condition met!')\n\nIn this case, since oome is False, the check on cache never happens."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html",
    "title": "NB: Strings",
    "section": "",
    "text": "Kinds of quotes\nStrings are signified by quotes.\nSingle and double quotes are identical in function.\nThey must be “straight quotes” though – cutting and pasting from a Word document with smart quotes won’t work.\nPython uses a print function.\nPython supports special “escape characters” in strings that produce effects when printed.\nNote that these are not unique to Python. They are part of almost all languages.\nThe print function puts spaces between strings and a newline at the end, but you can change that:\nComments are lines of code that aren’t read by the interpreter.\nThey are used to explain blocks of code, or to remove code from execution when debugging.\nThese following are multiline strings that can serve as comments:\nNote that multiline comments also evaluate as values.\nActually, they are list-like.\nHere are some functions applicable to strings because they are lists."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#quote-prefixes",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#quote-prefixes",
    "title": "NB: Strings",
    "section": "Quote prefixes",
    "text": "Quote prefixes\n\nr strings\nPrefixing a string causes escape characters to be uninterpreted.\n\nprint(\"Sentence one.\\nSentence two.\")\n\n\nprint(r\"Sentence one.\\nSentence two.\")\n\n\n\nf strings\nPrefixing a string with f allows variable interpolation – inplace evaluation of variables in strings.\n\nppl = 'knights'\ngreeting = 'Ni'\n\n\nprint(f'We are the {ppl} who say {greeting}!') # Output: We are the knights who say Ni!\n\nThe brackets and characters within them (called format fields) are replaced with the passed objects.\n\nprint(b\"This is a sentence.\")\n\n\nprint(\"This is a sentence.\")"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#lower-.upper",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#lower-.upper",
    "title": "NB: Strings",
    "section": ".lower(), .upper()",
    "text": ".lower(), .upper()\n\n'BOB'.lower().upper()"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#split",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#split",
    "title": "NB: Strings",
    "section": ".split()",
    "text": ".split()\nParase a string based on a delimiter, which defaults to whitespace.\nNOTE: This does not use regular expressions.\nThis returns a list.\n\nmontyPythonQuote = 'are.you.suggesting.coconuts.migrate'\n\n\n'are.you.suggesting.coconuts.migrate'.split('.')\n\n\nmontyPythonQuote\n\n\nmontyPythonQuote.split('.') # split by the '.' delimiter. Result: a list!"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#strip-.rstrip-lstrip-strip-methods",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#strip-.rstrip-lstrip-strip-methods",
    "title": "NB: Strings",
    "section": ".strip(), .rstrip(), lstrip() Strip methods",
    "text": ".strip(), .rstrip(), lstrip() Strip methods\nStrip out extra whitespace using strip(), rstrip() and lstrip() functions\n.strip() removes white space from anywhere\n.rstrip() only removes white space from the right-hand-side of the string\n.lstrip() only removes white space from the left-hand-side of the string\n\nstr1 = '  hello, world!'    # white space at the beginning\nstr2 = '  hello, world!  '  # white space at both ends\nstr3 = 'hello, world!  '    # white space at the end\n\n\nstr1, str2, str3\n\n\nstr1.lstrip(), str1.rstrip()\n\n\nstr2.strip(), str2.rstrip()\n\n\nstr2.lstrip(), str3.rstrip()\n\n\nstatus.startswith('a')\n\n\nstatus.endswith('s')"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#replace",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#replace",
    "title": "NB: Strings",
    "section": ".replace()",
    "text": ".replace()\n\n\"latina\".replace(\"a\", \"x\")"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#format",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#format",
    "title": "NB: Strings",
    "section": ".format()",
    "text": ".format()\nVariable values can be embedding in strings using the format() function.\nPlace {} in the string in order from left to right. followed by .format(var1, var2, ...)`\n\nepoch = 20\nloss = 1.55\n\nprint('Epoch: {}, loss: {}'.format(epoch, loss))\n\nThis breaks, as three variables are required based on number of {}\n\nprint('Epoch: {}, loop: {}, loss: {}'.format(epoch, loss))"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#zfill",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#zfill",
    "title": "NB: Strings",
    "section": ".zfill()",
    "text": ".zfill()\nBasic usage of the str.zfill() method (pads a numeric string on the left with zeros) It understands about plus and minus signs\n\nprint('12'.zfill(5))       # Output: 00012\nprint('-3.14'.zfill(7))    # Output: -003.14\nprint('3.141592'.zfill(5)) # Output: 3.141592"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#len-length",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#len-length",
    "title": "NB: Strings",
    "section": "len() Length",
    "text": "len() Length\nThis is built-in length funciton tells us how many characters in the string.\nIt also applys to any list-like object, including strings, lists, dicts, sets, and dataframes.\n\nlen?\n\n\nmy_new_tring = 'This is a string'\n\n\nlen(my_new_tring)\n\n\nIndexing\nSince strings are sequences in Python, each character of the string has a unique position that can be indexed.\nIndexes are indicated by suffixed brackets, e.g. foo[]\n\nmy_new_tring[0] # displays the first character of the string\n            # first position is position zero. Will display 'h'\n\n\nmy_new_tring[-1] # displays the last character. Negatives count backwords.\n\n\n\nSlicing\nWe can used the colon to ‘slice’ strings (and lists)\n\nmy_new_tring[0:4] # First four characters (index positions 0-3)\n\n\nmy_new_tring[:4]  # Beginning (0) to (n-1) position\n\n\nmy_new_tring[4:]  # Fifth character and onwards until the end of the string\n\nit is NOT possible to reassign elements of a string. Python strings are immutable.\n\nstatus = 'success'\nstatus[0] = 't'\n\nAdd strings and handle pathing"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html",
    "title": "NB: Structures",
    "section": "",
    "text": "Lists\nA list is an ordered sequence of items.\nEach element of a list is associated with an integer that represents the order in which the element appears.\nLists are indexed with brackets [].\nList elements are accessed by providing their order number in the brackets.\nLists are mutable, meaning you can modify them after they have been created.\nThey can contain mixed types.\nLike a hash table.\nHas key-value pairs.\nElements are indexed using brackets [] (like lists).\nBut they are constructed used braces {}.\nKey names are unique. If you re-use a key, you overwrite its value.\nKeys don’t have to be strings – they can be numbers or tuples or expressions that evaluate to one of these.\nA tuple is like a list but with one big difference: a tuple is an immutable object!\nYou can’t change a tuple once it’s created.\nA tuple can contain any number of elements of any datatype.\nAccessed with brackets [] but constructed with parentheses ().\nA set is an unordered collection of unique objects.\nThey are subject to set operations.\nNote the set is deduped\nSince sets are unordered, they don’t have an index. This will break:\nCheck if a value is in the set using in\nCombine two sets\nThis fails:\nThis succeeds:\nGet the set intersection\nA range is a sequence of integers, from start to stop by step. - The start point is zero by default.\n- The step is one by default.\n- The stop point is NOT included.\nRanges can be assigned to a variable.\nMore often, ranges are used in iterations, which we will cover later.\nanother range:\nVery often you will want to build a dictionary from some data source, and add keys as they appear. The default dict type in Python, however, requires that the key exists before you can mutate it. The defaultdict type in the collections module solves this problem. Here’s an example."
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing",
    "title": "NB: Structures",
    "section": "Constructing",
    "text": "Constructing\nThey can be constructed in several ways:\n\nlist1 = []\nlist2 = list()\nlist3 = \"some string\".split()\nnumbers = [1,2,3,4]"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#indexing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#indexing",
    "title": "NB: Structures",
    "section": "Indexing",
    "text": "Indexing\nZero-based indexing\nPython uses xzero-based indexing, which means for a collection mylist\nmylist[0] references the first element\nmylist[1] references the second element, etc\nFor any iterable object of length N:\nmylist[:n] will return the first n elements from index 0 to n-1\nmylist[-n:] will return the last n elements from index N-n to N-1\n\nnumbers[0] # Access first element (output: 1)\n\n\nnumbers[0] + numbers[3] # doing arithmetic with the values (output: 5)\n\n\nnumbers[len(numbers)]"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#slicing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#slicing",
    "title": "NB: Structures",
    "section": "Slicing",
    "text": "Slicing\n\nnumbers[0:2] # Output: [1, 2]\n\n\nnumbers[1:3] # Output: [2, 3]\n\n\nlen(numbers) # use len() function to find the size. Output: 4\n\n\nnumbers[2:]  # Output: [3, 4]"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#multiply-lists-by-a-scalar",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#multiply-lists-by-a-scalar",
    "title": "NB: Structures",
    "section": "Multiply lists by a scalar",
    "text": "Multiply lists by a scalar\nA scalar is a single value number.\n\nnumbers * 2"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#concatenate-lists-with",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#concatenate-lists-with",
    "title": "NB: Structures",
    "section": "Concatenate lists with +",
    "text": "Concatenate lists with +\n\nnumbers2 = [30, 40, 50]\n\n\nnumbers + numbers2 # concatenate two lists"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-mix-types",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-mix-types",
    "title": "NB: Structures",
    "section": "Lists can mix types",
    "text": "Lists can mix types\n\nmyList = ['coconuts', 777, 7.25, 'Sir Robin', 80.0, True]\n\n\nmyList\n\nWhat happens if we multiply a list with strings?\n\n# myList * 2"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-be-nested",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-be-nested",
    "title": "NB: Structures",
    "section": "Lists can be nested",
    "text": "Lists can be nested\n\nnames = ['Darrell', 'Clayton', ['Billie', 'Arthur'], 'Samantha']\nnames[2] # returns a *list*\nnames[0] # returns a *string*\n\ncannot subset into a float, will break\n\nnames[2][0]"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-concatenated-with",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-concatenated-with",
    "title": "NB: Structures",
    "section": "Lists can concatenated with +",
    "text": "Lists can concatenated with +\n\nvariables = ['x1', 'x2', 'x3']\nresponse = ['y']\n\n\nvariables + response"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-1",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-1",
    "title": "NB: Structures",
    "section": "Constructing",
    "text": "Constructing\n\ndict1 = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}\n\n\ndict2 = dict(x=55, y=29, z=99) # Note the absence of quotes around keys\n\n\ndict2\n\n\ndict3 = {'A': 'foo', 99: 'bar', (1,2): 'baz'}\n\n\ndict3"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#retrieve-a-value",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#retrieve-a-value",
    "title": "NB: Structures",
    "section": "Retrieve a value",
    "text": "Retrieve a value\nJust write a key as the index.\n\nphonelist = {'Tom':123, 'Bob':456, 'Sam':897}\n\n\nphonelist['Bob']"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#print-list-of-keys-values-or-both",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#print-list-of-keys-values-or-both",
    "title": "NB: Structures",
    "section": "Print list of keys, values, or both",
    "text": "Print list of keys, values, or both\nUse the .keys(), .values()', or.items()` methods.\nKeys are not sorted. For example, they are not ordered in order in which they were added.\n\nphonelist.keys() # Returns a list\n\n\nphonelist.values() # Returns a list\n\n\nphonelist.items() # Returns a list of tuples\n\n\nphonelist # note the data returned is not the same as the data entered"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-2",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructing-2",
    "title": "NB: Structures",
    "section": "Constructing",
    "text": "Constructing\nCreated with comma-separated values, with or without parenthesis.\n\nletters = 'a', 'b', 'c', 'd'\n\n\nletters\n\n\nnumbers = (1,2,3,4) # numbers 1,2,3,4 stored in a tuple\n\nA single valued tuple must include a comma ,, e.g.\n\ntuple0 = (29)\n\n\ntuple0, type(tuple0)\n\n\ntuple1 = (29,)\n\n\ntuple1, type(tuple1)\n\n\nlen(numbers)\n\n\nnumbers[0] = 5 # Trying to assign a new value 5 to the first position"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#membership-with-in",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#membership-with-in",
    "title": "NB: Structures",
    "section": "Membership with in",
    "text": "Membership with in\nReturns a boolean.\n\n'Sam' in phonelist"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#try-with-dict",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#try-with-dict",
    "title": "NB: Structures",
    "section": "Try with dict",
    "text": "Try with dict\n\nwords = {}\nfor word in source_data:\n    words[word] += 1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#use-try-and-except",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#use-try-and-except",
    "title": "NB: Structures",
    "section": "Use try and except",
    "text": "Use try and except\n\nfor word in source_data:\n    try:\n        words[word] += 1\n    except KeyError:\n        words[word] = 1\n\n\nwords"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#or-use-.get",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#or-use-.get",
    "title": "NB: Structures",
    "section": "Or use .get()",
    "text": "Or use .get()\n\nfor word in source_data:\n    words[word] = words.get(word, 0) + 1"
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#use-collections.defaultdict",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#use-collections.defaultdict",
    "title": "NB: Structures",
    "section": "Use collections.defaultdict",
    "text": "Use collections.defaultdict\n\nfrom collections import defaultdict\n\n\nwords2 = defaultdict(int) # Not the type must be set\n\n\nfor word in source_data:\n    words2[word] += 1\n\n\nwords2"
  },
  {
    "objectID": "modules/m03/m03-intro.html#topics",
    "href": "modules/m03/m03-intro.html#topics",
    "title": "M03 Control Structures",
    "section": "Topics",
    "text": "Topics\n\nMore on Statements and Syntax\nControl Structures and Loops\nIterators\nComprehensions"
  },
  {
    "objectID": "modules/m03/m03-intro.html#outcomes",
    "href": "modules/m03/m03-intro.html#outcomes",
    "title": "M03 Control Structures",
    "section": "Outcomes",
    "text": "Outcomes\n\nRecognize primary control structures available in Python and their basic use cases\nWrite comprehensions for each of Python’s list-like data structures\nRecognize when iterators are used by Python functions (such as open())\nUnderstand basic conditional logic statements and their role in designing data flow in a program"
  },
  {
    "objectID": "modules/m03/m03-intro.html#readings",
    "href": "modules/m03/m03-intro.html#readings",
    "title": "M03 Control Structures",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nLutz, 2019, Part III, Chapter 10. Introducing Python Statements\n\n\nLutz, 2019, Part III, Chapter 11. Assignments, Expressions, and Prints Read only up to and including “The Python 3.X print Function.”\n\n\nLutz, 2019, Part III, Chapter 12. if Tests and Syntax Rules\n\n\nLutz, 2019, Part III, Chapter 13. while and for Loops\n\n\nLutz, 2019, Part III, Chapter 14. Iterations and Comprehensions\n\n\nLutz, 2019, Part III, Chapter 15: The Documentations Interlude\n\n\n\n\nOptional\n\n\nVariables, Expressions, Statements, Types (Python Notes)\n\n\nMore Control Flow Tools (Python Docs)\n\n\nIf … Then (W3S)\n\n\nIterators (GFG)"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#introducing-control-structures",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#introducing-control-structures",
    "title": "NB: Control Structures",
    "section": "Introducing Control Structures",
    "text": "Introducing Control Structures\nPython includes structures to control the flow of a program:\n\nconditions (if, else)\nloops\n\nwhile-loop\nExecute statements while a condition is true\nfor-loop\nIterates over a iterable object (list, tuple, dict, set, string)"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#indentation",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#indentation",
    "title": "NB: Control Structures",
    "section": "Indentation",
    "text": "Indentation\nThis is where Python differs from most languages. To define control structures,\nand functional blocks of code in general, most languages use either characters like braces { and } or key words like IF ... END IF.\nPython uses tabs – spaces, actually – to signify logical blocks off code.\nIt is therefore imperative to understand and get a feel for indentation. For more information, see Lutz 2019, “A Tale of Two Ifs.”"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#conditions",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#conditions",
    "title": "NB: Control Structures",
    "section": "Conditions",
    "text": "Conditions\n\nif and else can be used for conditional processing.\n\nval = -2\n\nif val >=0:\n    print(val)\nelse:\n    print(-val)\n\n\n\nelif\nelif is reached when the previous statements are not.\n\nval = -2\n\nif -10 < val < -5:\n    print('bucket 1')\nif -5 <= val < -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\n\n\n\nelse\nelse can be used as a catchall\n\nval = 5\n\nif -10 < val < -5:\n    print('bucket 1')\nelif -5 <= val < -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\nelse:\n    print('bucket 4')\n\n\n\nif and else as one-liners\n\nx = 3\nprint('odd') if x % 2 == 1 else print('even')\n\nNotice == for checking the condition x % 2 == 1.\nboth if and else are required. This breaks:\n\nprint('odd') if x % 2 == 1\n\n\n\nUsing multiple conditions\nIf statements can be complex combinations of expressions.\nUse parentheses carefully, to keep order of operations correct.\n\n## correct\n\nval = 2\n\nif (-2 < val < 2) or (val > 10):\n    print('bucket 1')\nelse:\n    print('bucket 2')\n\n\n## incorrect - misplaced parenthesis\n\nif (-2 < val) < 2 or val > 10:\n    print('bucket 1')\nelse:\n    print('bucket 2')\n\nand this is because True < 2, as True is cast to integer value 1\nthis is not the desired result…but does it make sense?"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#loops",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#loops",
    "title": "NB: Control Structures",
    "section": "Loops",
    "text": "Loops\n\nwhile\nWhat does this print?\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\nprint(ix)\n\n\n\nbreak to exit the loop altogether\nsometimes you want to quit the loop early, if some condition is met.\nuses if-statement\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\n    if ix == 4:\n        break\nprint(ix)\n\nThe break causes the loop to end early\n\n\ncontinue to stop the current iteration\nsometimes you want to introduce skipping behavior in the loop.\nuses if-statement\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\n    if ix == 4:\n        print('skipping 4...')\n        continue\n    print(ix)\n\nThe continue causes the loop to skip printing 4\n\n\nfor\niterate over an iterable\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    city = city.lower()\n    print(city)\n\nquit early if SF reached, using break\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    if city == 'SF':\n        break\n    city = city.lower()\n    print(city)\n\nskip over SF if reached, using continue\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    if city == 'SF':\n        continue\n    city = city.lower()\n    print(city)"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#while-vs-for",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#while-vs-for",
    "title": "NB: Control Structures",
    "section": "while vs for",
    "text": "while vs for\nFor loops are used to loop through a list of values or an operation in which the number of iterations is known in advance.\nWhile loops are when you don’t know how many interations it will take – you are depending on some condition to be met.\nIt is possible for while loops to be unending, for example:\nwhile 1:\n    print(\"This is so annoying\")"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html",
    "title": "NB: Iterables and Iterators",
    "section": "",
    "text": "Defining Iterables and Iterators\nIterable objects or iterables can return elements one at a time.\nAn iterator is an object that iterates over iterable objects such as sets, lists, tuples, dictionaries, and strings.\nIteration can be implemented: - with a for loops - with the next() method\nNext, we show examples for various iterables.\nWe iterated over a list. Next we will illustrate for other iterables: str, tuple, set, dict\nlists, tuples, and strings are sequences. Sequences are designed so that elements come out of them in the same order they were put in.\nSets and dictionaries are not sequences, since they don’t keep elements in order. They are called collections. The ordering of the items is arbitrary.\nNOTE: This has changed for dictionaries in Python 3.7: > the insertion-order preservation nature of dict objects has been declared to be an official part of the Python language spec.\n– What’s New in Python 3.7\niterating using for\niterating using iter() and next()\niterating using for\niterating using iter() and next()\niterating using for\niterating using iter() and next()\niterating using for\nAlternatively, keys and values can be extracted from the dict by: - looping over the keys - extract the value by indexing into the dict with the key\niterating using for\nIf you just want to iterate for a known number of times, use range().\nVery often you will want to know iteration number you are on in a loop.\nThis can be used to name files or dict keys, for example.\nenumerate() will return the index and key for each iteration.\nIterations can be nested!\nThis works well with nested data structures, like dicts within dicts.\nThis is basically how JSON files are handled, BTW.\nBe careful, though – these can get deep and complicated.\niterating using iter() and next()"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-for",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-for",
    "title": "NB: Iterables and Iterators",
    "section": "iterating using for",
    "text": "iterating using for\n\ntokens = ['living room', 'was', 'quite', 'large']\n\nfor tok in tokens:\n    print(tok)\n\nliving room\nwas\nquite\nlarge"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-iter-and-next",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-iter-and-next",
    "title": "NB: Iterables and Iterators",
    "section": "iterating using iter() and next()",
    "text": "iterating using iter() and next()\niter() gets an iterator. Pops out a value each time it’s used.\nnext() gets the next item from the iterator\n\ntokens = ['living room','was','quite','large']\nmyit = iter(tokens)\nprint(next(myit)) \nprint(next(myit)) \nprint(next(myit)) \nprint(next(myit)) \n\nliving room\nwas\nquite\nlarge\n\n\nCalling next() when the iterator has reached the end of the list produces an exception:\n\nprint(next(myit))\n\nStopIteration: \n\n\nNext, look at the type of the iterator, and the documentation\n\ntype(myit)\n\nlist_iterator\n\n\n\nhelp(myit)\n\nHelp on list_iterator object:\n\nclass list_iterator(object)\n |  Methods defined here:\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  __length_hint__(...)\n |      Private method returning an estimate of len(list(it)).\n |  \n |  __next__(self, /)\n |      Implement next(self).\n |  \n |  __reduce__(...)\n |      Return state information for pickling.\n |  \n |  __setstate__(...)\n |      Set state information for unpickling.\n\n\n\n\nhelp(next)\n\nHelp on built-in function next in module builtins:\n\nnext(...)\n    next(iterator[, default])\n    \n    Return the next item from the iterator. If default is given and the iterator\n    is exhausted, it is returned instead of raising StopIteration.\n\n\n\nNote that for implicitly creates an iterator and executes next() on each loop iteration. This is best way to iterate through a list-like object."
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html",
    "title": "NB: Comprehensions",
    "section": "",
    "text": "List Comprehensions\nConsider this task: check if each integer in a list is odd.\nWithout list comprehensions, you might do this:\nComprehensions provide a concise method for iterating over any list-like object to a new list like object.\nThere are comprehensions for each list-like object: * List comprehensions * Dictionary comprehensions * Tuple comprehensions * Set comprehensions\nComprehensions are essentially very concise for loops. They are compact visually, but they also are more efficient than loops.\nAll comprehensions have the form:\nlistlike_result = [ expression + context]\nThe type of comprehension is indicated by the use of enclosing pairs, just like anonymous constructors:\nExpression defines what to do with each element in the list. This has the structure of the kind of comprehension. So, dictionary comprehension expressions take the form k:v while sets use v.\nContext defines which list elements to select. The context always consists of an arbitrary number of for and if statements.\nDictionary comprehensions provide a concise method for iterating over a dictionary to create a new dictionary.\nThis is common when data is structured as key-value pairs, and we’d like to filter the dict.\nWe build the key-value pairs using key:model_arch[key], where the key indexes into the dict model_arch"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#check-if-odd",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#check-if-odd",
    "title": "NB: Comprehensions",
    "section": "Check if Odd",
    "text": "Check if Odd\n\nvals = [1,5,6,8,12,15]\nis_odd = []\n\nfor val in vals:   \n    if val % 2: # if remainder is one, val is odd\n        is_odd.append(True)\n    else:       # else it's not odd\n        is_odd.append(False)\n\nis_odd\n\n[True, True, False, False, False, True]\n\n\nThe code loops over each value in the list, checks the condition, and appends to a new list.\nThe code works, but it’s lengthy compared to a list comprehension.\nThe approach takes extra time to write and understand.\nLet’s solve with a list comprehension:\n\nis_odd = [val % 2 == 1 for val in vals]\nis_odd\n\n[True, True, False, False, False, True]\n\n\nMuch shorter, and if you understand the syntax, quicker to interpet.\nNote the in-place use of an expression.\nNow let’s discuss the syntax."
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#stop-word-remover",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#stop-word-remover",
    "title": "NB: Comprehensions",
    "section": "Stop Word Remover",
    "text": "Stop Word Remover\nCreate list of words, and list of stop words.\nFilter out the stop words (considered not important).\n\nstop_words = ['a','am','an','i','the','of']\nwords      = ['i','am','not','a','fan','of','the','film']\n\nclean_words = [wd for wd in words if wd not in stop_words]\nclean_words\n\n['not', 'fan', 'film']\n\n\nplacing the color-coding on the list comprehension:\n[ wd   for wd in words  if wd not in stop_words]\n\nthe expression is very simple: wd. keep the word if meets condition\nthe condition does the work: if the word isn’t in list of stop words, keep it\n\nSide note: This task can also be done with sets, if you are not concerned with mulitple instances of the same word:\n\ns1 = set(stop_words)\ns2 = set(words)\ns3 = s2 - s1\n\n\ns3\n\n{'fan', 'film', 'not'}"
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#select-tokens-containing-units",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#select-tokens-containing-units",
    "title": "NB: Comprehensions",
    "section": "Select Tokens Containing Units",
    "text": "Select Tokens Containing Units\nGiven a list of measurements, retain elements containing mmHg (millimeters of mercury)\n\nunits = 'mmHg'\nmeasures = ['20', '115mmHg', '5mg', '10 mg', '7.5dl', '120 mmHg']\nmeas_mmhg = [meas for meas in measures if units in meas]\n\n\nmeas_mmhg   \n\n['115mmHg', '120 mmHg']\n\n\nFiltering on two conditions\n\nunits1 = 'mmHg'\nunits2 = 'dl'\nmeas_mmhg_dl = [meas for meas in measures if units1 in meas or units2 in meas]\n\n\nmeas_mmhg_dl\n\n['115mmHg', '7.5dl', '120 mmHg']\n\n\nThis can be written differently for clarity:\n\n[meas \n for meas in measures \n if units1 in meas \n or units2 in meas]\n\n['115mmHg', '7.5dl', '120 mmHg']"
  },
  {
    "objectID": "modules/m04/m04-intro.html#topics",
    "href": "modules/m04/m04-intro.html#topics",
    "title": "M04 Functions",
    "section": "Topics",
    "text": "Topics\n\nBuilt-in functions\nUser-defined functions\nVariable scope\nLambda functions\nDesign of functions\nRecursion"
  },
  {
    "objectID": "modules/m04/m04-intro.html#outcomes",
    "href": "modules/m04/m04-intro.html#outcomes",
    "title": "M04 Functions",
    "section": "Outcomes",
    "text": "Outcomes\n\nBe able to use Pythons native and imported functions\nBe able to write your own functions\nUnderstand concept of variable scope\nBe able to write lambda functions and understand their use cases\nGrasp basic principles of function design\nImplement simple recursion functions"
  },
  {
    "objectID": "modules/m04/m04-intro.html#readings",
    "href": "modules/m04/m04-intro.html#readings",
    "title": "M04 Functions",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\n\nLutz 2019, Part IV, Chapter 16: Function Basics\n\n\nLutz 2019, Part IV, Chapter 17: Scopes Non-local is for advanced users\n\n\nLutz 2019, Part IV, Chapter 18. Arguments\n\n\nLutz 2019, Part IV, Chapter 19: Advanced Function Topics\n\n\n\n\nOptional\n\n\nMcKinney, Python for Data Analysis, Appendix A: Python Language Essentials\n\n\nRead section on Functions\n\n\nFunctions (W3S)\n\n\nGlobal and Local Variables (GFG)\n\n\nLambda Functions (Real Python)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing",
    "title": "NB: Importing Functions",
    "section": "Importing",
    "text": "Importing\nCalling a function from the “math” library is straightforward:\n\nImport Python’s Math library with the command import math\nCall methods from the imported math object using “dot” notation, that is, .(any parameters).\n\nFor example:\nmath.sqrt(12)\nPut all of your import statements at the very top of your code, before anything else, other than any header comments (which you should have).\nHere are some example math functions:\n\nimport math # Typically best to put this line of code at the TOP of the file\n\n\nmath.sqrt(12)\n\n3.4641016151377544\n\n\n\nmath.floor(2.5) # returns largest whole number less than the argument\n\n2\n\n\nHere’s an example using the random library (a class).\n\nimport random # Typically best to put this line of code at the TOP of the file\n\n\nrandom.random()# will return a number between 0 and 1 \n\n0.3599068479674543\n\n\n\nrandom.randint(1, 100) # this will return a random integer in the range 1-100\n\n18"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing-specific-functions",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html#importing-specific-functions",
    "title": "NB: Importing Functions",
    "section": "Importing Specific Functions",
    "text": "Importing Specific Functions\nIf you know what specifics function you are going to use from a library, you can import them directly, like so:\nfrom math import sqrt\nThis has two effects: 1. It reduces the memory used by the library in your program. 2. It allows you to call the function directly, with the object dot notation.\n\nfrom math import sqrt\n\n\nsqrt(99)\n\n9.9498743710662"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Importing.html#aliasing",
    "href": "notebooks/M04_PythonFunctions/M04-01-Importing.html#aliasing",
    "title": "NB: Importing Functions",
    "section": "Aliasing",
    "text": "Aliasing\nTo avoid having the function name conflict with an existing function in your program,\nyou can alias the imported function like so:\n\nfrom math import sqrt as SquareRoot\n\n\nSquareRoot(65000)\n\n254.95097567963924\n\n\n\ndef square(number):\n    return number * number  # square a number\n    \ndef addTen(number):\n    return number + 10  # Add 10 to the number   \n    \ndef numVowels(string):\n    string = string.lower()  # convert user input to lowercase\n    count = 0\n    for i in range(len(string)):\n        if string[i] == \"a\" or string[i] == \"e\" or \\\n           string[i] == \"i\" or string[i] == \"o\" or \\\n           string[i] == \"u\":\n           count += 1 # increment count\n    return count"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#introduction",
    "title": "NB: Introduction to Functions",
    "section": "Introduction",
    "text": "Introduction\nA function is piece of source code, separate fom the larger program, that performs a specific task. This section of code is given a name and can be called from the main program. It is called by using its given name.\nFunctions are the verbs of a programming language. They signify action, and take subjects and objects (as it were).\nFunctions take input and produce output.\n\nFunction inputs are called both parameters and arguments.\nOutputs are called return values\n\nFunctions are always written with parentheses at the end of their names, e.g.\nlen(some_list)\nInternally, they contain a block of code to do their work.\nOften the producte a transformation … from simple to complex.\nWhen you use a function, we say you call a function. Programmers speak of “function calls” and “callbacks”."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#benefits",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#benefits",
    "title": "NB: Introduction to Functions",
    "section": "Benefits",
    "text": "Benefits\nReduce complex tasks into simpler tasks.\nEliminate duplicate code – no need to re-write, reuse function as needed.\nCode reuse. Once function is written, you can reuse it in any other program.\nDistribute tasks to multiple programmers. For example, each function can be written by someone.\nHide implementation details, i.e. abstraction.\nIncrease code readability.\nImprove debugging by improving traceability. Things are easier to follow; you can jump from function to function."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#built-in-functions",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#built-in-functions",
    "title": "NB: Introduction to Functions",
    "section": "Built-in Functions",
    "text": "Built-in Functions\nPython provides many built-in functions. See Python built-in functions.\nWe’ve looked at many of these already.\nThese are functions that are available to use any time your are running Python.\nTo take one simple example, this is a built-in function: bool().\nTakes an argument \\(x\\) and returns a boolean value, i.e. True or False.\n\nbool(0), bool(500)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#imported-functions",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#imported-functions",
    "title": "NB: Introduction to Functions",
    "section": "Imported Functions",
    "text": "Imported Functions\nPython is meant to be a highly modular language.\nIt is not designed to have a lot of special purpose functions built into it.\nThese keeps it light and highly customizable.\nMany functions (and other stuff) can be imported into a program to add to the functions that you can call in a script.\nThere are also many packages to bring in additional functions.\nPackages and Libraries"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#user-defined-functions",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#user-defined-functions",
    "title": "NB: Introduction to Functions",
    "section": "User-Defined Functions",
    "text": "User-Defined Functions\nPython makes it easy for you to write your own functions. These are called user-defined functions.\nLet’s write a function to compare the list against a threshold.\n\ndef vals_greater_than_or_equal_to_threshold(vals, thresh):\n    '''\n    This is the \"docstring\" of a function. It is optional but expected. It describes it's \n    purpose and the nature of the input and return values, as well as a sense of what it does.\n    More elaborate information should appear in external documentation packages with the function.\n    \n    PURPOSE: Given a list of values, compare each value against a threshold\n    \n    INPUTS\n    vals    list of ints or floats\n    thresh  int or float\n    \n    OUTPUT\n    bools  list of booleans\n    '''\n    \n    bools = [val >= thresh for val in vals]\n    \n    return bools\n\nLet’s break down the components\nThe function definition starts with def, followed by name, one or more arguments in parenthesis, and then a colon.\nNext comes a docstring to provide information to users about how and why to use the function.\nThe function body follows.\n:astly is a return statement\nThe function call allows for the function to be used.\nIt consists of function name and required arguments:\nvals_greater_than_or_equal_to_threshold(arg1, arg2) where arg1, arg2 are arbitrary names.\n\nAbout the docstring\nA docstring m occurs as first statement in module, function, class, or method definition\nInternally, it is saved in __doc__ attribute of the function object.\nIt needs to be indented.\nIt can be a single line or a multi-line string.\n\n\nLet’s test our function\nThe function body used a list comprehension for the compare:\n[val >= thresh for val in vals]\n\n## validate that it works for ints\n\nx = [3, 4]\nthr = 4\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n\n## validate that it works for floats\n\nx = [3.0, 4.2]\nthr = 4.2\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n\n## vals_greater_than_or_equal_to_threshold(\"foo\", \"bar\")\n\nThis gives correct results and does exactly what we want.\n\n\nUsers can print the docstring\n\nprint(vals_greater_than_or_equal_to_threshold.__doc__)\n\nprint the help\n\nhelp(vals_greater_than_or_equal_to_threshold)\n\n\n?vals_greater_than_or_equal_to_threshold\n\nLet’s test our function\nThe function body used a list comprehension for the comparison:\n[val >= thresh for val in vals]\n\n## validate that it works for ints\n\nx = [3, 4]\nthr = 4\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n\n## validate that it works for floats\n\nx = [3.0, 4.2]\nthr = 4.2\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\nThis gives correct results and does exactly what we want.\nPrint the docstring\n\nprint(vals_greater_than_or_equal_to_threshold.__doc__)\n\nPrint the help\n\nhelp(vals_greater_than_or_equal_to_threshold)\n\nUse the ? prefix …\n\n?vals_greater_than_or_equal_to_threshold"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#passing-parameters",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#passing-parameters",
    "title": "NB: Introduction to Functions",
    "section": "Passing Parameters",
    "text": "Passing Parameters\nFunctions need to be called with correct number of parameters.\nThis function requires two params, but the function call includes only one param.\n\ndef fcn_bad_args(x, y):\n    return x + y\n\n\nfcn_bad_args(10)\n\n\nParameter Order\nWhen calling a function, parameter order matters.\n\ndef fcn_swapped_args(x, y):\n    out = 5 * x + y\n    return out\n\n\nx = 1\ny = 2\n\n\nfcn_swapped_args(x, y)\n\n\nfcn_swapped_args(y, x)\n\nGenerally it’s best to keep parameters in order.\nYou can swap the order by putting the parameter names in the function call.\n\nfcn_swapped_args(y=y, x=x)\n\n\n\nWeirdness Alert\nNote that the same name can be used for the parameter names and the variables passed to them.\nThe names themselves have nothng to do with each other!\nIn other words, just because a function names an argument foo,\nthe variables passed to it don’t have to name foo or anything like it.\nThey can even be named the same thing – it does not matter."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#unpacking-list-likes-with-args",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#unpacking-list-likes-with-args",
    "title": "NB: Introduction to Functions",
    "section": "Unpacking List-likes with *args",
    "text": "Unpacking List-likes with *args\nThe * prefix operator can be passed to avoid specifying the arguments individually.\n\ndef show_arg_expansion(*models):\n    \n    print(\"models          :\", models)\n    print(\"input arg type  :\",  type(models))\n    print(\"input arg length:\", len(models))\n    print(\"-----------------------------\")\n    \n    for mod in models:\n        print(mod)    \n\nWe can pass a tuple of values to the function …\n\nshow_arg_expansion(\"logreg\", \"naive_bayes\", \"gbm\")\n\nYou can also pass a list to the function.\nIf you want the elements unpacked, put * before the list.\n\nmodels = [\"logreg\", \"naive_bayes\", \"gbm\"]\nshow_arg_expansion(*models)\n\nThis approach allows your function to accept an arbitrary number of arguments.\n\nshow_arg_expansion('a b c d e f g'.split())\n\nThe reverse is true, too.\nYou can use the * prefix to pass list-like objects to a function that specifies its arguments.\n\ndef arg_expansion_example(x, y):\n    return x**y\n\n\nmy_args = [2, 8]\narg_expansion_example(*my_args)\n\nBut, the passed object must be the right length.\n\nmy_args2 = [2, 8, 5]\narg_expansion_example(*my_args2)\n\n\n## **my_dict"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#default-arguments",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#default-arguments",
    "title": "NB: Introduction to Functions",
    "section": "Default Arguments",
    "text": "Default Arguments\nUse default arguments to set the value of arguments when left unspecified.\n\ndef show_results(precision, printing=True):\n    precision = round(precision, 2)\n    if printing:\n      print('precision =', precision)\n    return precision\n\n\npr = 0.912\nres = show_results(pr)\n\nThe function call didn’t specify printing, so it defaulted to True.\nNOTE: Default arguments must follow non-default arguments. This causes trouble:\n\ndef show_results(precision, printing=True, uhoh):\n    precision = round(precision, 2)\n    if printing:\n      print('precision =', precision)\n    return precision"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#returning-values",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#returning-values",
    "title": "NB: Introduction to Functions",
    "section": "Returning Values",
    "text": "Returning Values\nFunctions are not required to have return statement.\nIf there is no return statement, a function returns None.\nFunctions can return no value (None), one value, or many.\nMany values are returned as a tuple.\nAny Python object can be returned.\n\n## returns None, and prints.\n\ndef fcn_nothing_to_return(x, y):\n    out = 'nothing to see here!'\n    print(out)\n\n\nfcn_nothing_to_return(x, y)\n\n\nr = fcn_nothing_to_return(1, 1)\nprint(r)\n\n\n## returns three values\n\ndef negate_coords(x, y, z):\n    return -x, -y, -z \n\n\na, b, c = negate_coords(10, 20, 30)\nprint('a =', a)\nprint('b =', b)\nprint('c =', c)\n\nIf you don’t need an output, use the dummy variable _\n\nd, e, _ = negate_coords(10,20,30)\nprint('d =', d)\nprint('e =', e)\n\nNote: It’s generally a good idea to include return statements, even if not returning a value.\nThis shows that you did not forget to consider the return value.\nYou can use return or return None.\nFunctions can contain multiple return statements.\nThese may be used under different logical conditions.\n\ndef absolute_value(num):\n    if num >= 0:\n        return num\n    return -num\n\n\nabsolute_value(-4)\n\n\nabsolute_value(4)\n\nFor non-negative values, the first return is reached.\nFor negative values, the second return is reached."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Functions.html#function-design",
    "href": "notebooks/M04_PythonFunctions/M04-02-Functions.html#function-design",
    "title": "NB: Introduction to Functions",
    "section": "Function Design",
    "text": "Function Design\nA function is not just a bag of code!\nSome good practices for creating and using functions:\n\ndesign a function to do one thing\n\nMake them as simple as possible, which makes them:\n\nmore comprehensible\neasier to maintain\nreusable\n\nThis helps avoid situations where a team has 20 variations of similar functions.\nGive your function a good name.\n\nIt should reflect the action it performs.\nBe consistent in your naming conventions.\nA name like compute_variances_sort_save_print suggests the function is overworked!\n\nIf the function compute_variances also produces plots and updates variables, it will cause confusion.\nAlways give your function a docstring - Particularly important since indicating data types is not required.\n- As a side note, you can include this information by using type annotation.\nFinally, at some point you may be interested to learn some of the formatting languages that have been developed to write docstrings. See Lutz 2019 and this web page about Documenting Python Code for more info."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#introduction",
    "title": "NB: Lambda Functions",
    "section": "Introduction",
    "text": "Introduction\nPython lambda functions are small, informal functions. They don’t get a name.\nThe are “anonymous.”\nFrom Lutz 2019:\n\nBesides the def statement, Python also provides an expression form that generates function objects. Because of its similarity to a tool in the Lisp language, it’s called lambda. Like def, this expression creates a function to be called later, but it returns the function instead of assigning it to a name. This is why lambdas are sometimes known as anonymous (i.e., unnamed) functions. In practice, they are often used as a way to inline a function definition, or to defer execution of a piece of code.\n\nThe general form of a lambda function is:\n\nlambda x: x\n\n<function __main__.<lambda>(x)>\n\n\nYou can call the function like this:\n\n(lambda x: x)(2)\n\n2\n\n\nincrement x\n\n(lambda x: x+1)(5)\n\n6\n\n\nsum two variables\n\nlambda x, y: x + y\n\n<function __main__.<lambda>(x, y)>"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#assigned-to-a-variable",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#assigned-to-a-variable",
    "title": "NB: Lambda Functions",
    "section": "Assigned to a Variable",
    "text": "Assigned to a Variable\nEven though they don’t get a name, they can be assigned to variables.\nHere, a lambda function gets assigned to sum_two_vars.\n\nsum_two_vars = lambda x, y: x + y\n\n\nsum_two_vars(2,4)\n\nCheck if a value is non-negative\n\nis_non_negative = lambda x: x >= 0\n\n\nis_non_negative(-9)\n\n\nis_non_negative(0)\n\nPackage first element and all data into tuple\n\npack_first_all = lambda x: (x[0], x)\n\n\ncasado = ('rice','beans','salad','plaintain','chicken') # a typical Costa Rican dish\n\npack_first_all(casado)\n\nCheck for keyword “dirty”\n\nis_dirty = lambda txt: 'dirty' in txt\n\n\nkitchen_inspection = 'dirty dishes'\nis_dirty(kitchen_inspection)\n\n\nkitchen_inspection = 'pretty clean!'\nis_dirty(kitchen_inspection)\n\n**pass *args for unspecified number of arguments**\n\n(lambda *args: sum(args))(1,2,3)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#using-lambda",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#using-lambda",
    "title": "NB: Lambda Functions",
    "section": "Using Lambda",
    "text": "Using Lambda\nLambda functions are often used in Pandas. We will discuss there use in more detail when we get to that topic."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#introduction",
    "title": "NB: Recursion",
    "section": "Introduction",
    "text": "Introduction\nA recursive function is a function that calls itself.\nThis is weird, since it does not seem possible. How can a definition refer to itself?\nIn philosophy, this is expressed in the Barber’s Paradox:\n\nThe barber is the one who shaves all those, and those only, who do not shave themselves. Does the barber shave himself?\n\nFormally, it is a type of self-reference, like This sentence is false.\nA Cute Definition\nrecursion - the art of defining something (at least partly) in terms of itself, which is a naughty no-no in dictionaries but often works out okay in computer programs if you’re careful not to recurse forever (which is like an infinite loop with more spectacular failure modes).\nSource: PerlDoc\n\nA Formal Definition\nIn mathematics and computer science, a class of objects or methods exhibits recursive behavior when it can be defined by two properties:\nA simple base case (or cases): a terminating scenario that does not use recursion to produce an answer.\nA recursive step: a set of rules that reduces all successive cases toward the base case.\n\n\nAs Seen in Nature\nRecursion occurs naturally when a process applies a rule to itself successively.\nWe see this in fractals.\n\n\nInfinite Loops and Stack Overflows\nEvery recursive function must have a base condition that stops the recursion or else the function calls itself infinitely.\nThe Python interpreter limits the depths of recursion to help avoid infinite recursions, resulting in stack overflows.\nThe call stack is where information is stored relating to the active subroutines in a program.\nThe call stack has a limited amount of available memory. When excessive memory consumption occurs on the call stack, it results in a stack overflow error.\n\n\nA Note of Caution\nSo, Recursion is cool, but is expensive and complicated.\nRecursive functions can usually be implemented by traditional loops."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-computing-factorials",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-computing-factorials",
    "title": "NB: Recursion",
    "section": "Example: Computing Factorials",
    "text": "Example: Computing Factorials\nSource\nThe factorial of a number \\(n\\) is the product of all the integers from \\(1\\) to \\(n\\).\nFor example, the factorial of \\(5\\) (denoted as \\(5!\\)) is \\(1\\times2\\times3\\times4\\times5 = 120\\).\nLet’s implement this in code using a recursive function.\n\nRecursive Function\n\nn = 5\n\n\n##| tags: []\ndef factorial(x):\n    \"Finds the factorial of an integer using recursion\"\n    if x == 1: # Base condition\n        return 1\n    else:\n        return x * factorial(x-1)\n\n\n##| tags: []\n%time factorial(n)\n\n\n\nAs a while loop\n\ndef factorial_while(x):\n    \"Finds the factorial of an integer using a while loop\"\n    f = x\n    while x > 1:\n        x -= 1\n        f *= x\n    return f\n\n\n%time factorial_while(n)\n\n\n\nAs a for loop\n\ndef factorial_for(x):\n    \"Finds the factorial of an integer using a for loop\"\n    f = x\n    for i in range(1, x):\n        x -= 1\n        f *= x\n    return f\n\n\n%time factorial_for(n)\n\n\n\nCompare functions as \\(n\\) increases\n\nIncrease n to 50\n\nn = 50\n%time factorial(n)\n\n\n%time factorial_while(n)\n%time factorial_for(n)\n\n\n\nIncrease n to 500\n\nn = 500\n\n\n%time factorial(n)\n\n\n%time factorial_while(n)\n\n\n%time factorial_for(n)\n\n\n\nIncrease n to 5000\n\nn = 5000\n%time factorial(n)\n\n\nfactorial_while(n)\n\n\n%time factorial_while(n)\n\n\n%time factorial_for(n)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-the-fibonacci-sequence",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-the-fibonacci-sequence",
    "title": "NB: Recursion",
    "section": "Example: The Fibonacci sequence",
    "text": "Example: The Fibonacci sequence\nFib(0) = 0 (base case 1)\nFib(1) = 1 (base case 2)\nFor all integers n > 1, Fib(n) = Fib(n − 1) + Fib(n − 2)\n\ndef Fibonacci(n):\n    \"Compute a Fibonacci Sequence using recursion\"\n\n    # If n is negative\n    if n < 0:\n        print(\"Incorrect input. Value must be 0 or greater.\")\n\n    # If n is 0\n    elif n == 0:\n        return 0\n\n    # If n is 1 or 2\n    elif n == 1 or n == 2:\n        return 1\n\n    else:\n        return Fibonacci(n - 1) + Fibonacci(n - 2)\n\n\nn = 9\n\n\nFibonacci(9)\n\n\nfor n in range(100):\n    if n > 0: print(\", \", end=\"\")\n    print(Fibonacci(n), end=\"\")\n\n\nAs a for loop\n\ndef fibber(r:int = 10):\n    \"\"\"\n    Computes a Fibonacci Sequence using a for loop. \n    Parameter r must be in integer > 3. Defaults to 10.\n    Returns a string as a comma-limited series.\n    \"\"\"\n    seq = [1,1,2] \n    kernel = lambda x, i: x[i-1] + x[i-2]\n    for n in range(3, r):\n        seq.append(seq[n-1] + seq[n-2])\n    return ', '.join([str(x) for x in seq])\n\n\nfibber(20)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#aside-a-general-sequence-function",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#aside-a-general-sequence-function",
    "title": "NB: Recursion",
    "section": "Aside: A General Sequence Function",
    "text": "Aside: A General Sequence Function\nRecursive functions are often used to produce mathematical sequences, but since they have limits on depth, they are of limited use for this purpose.\nHere is a function that can combine many sequences using two sequence parameters: * The initial state of the sequence, represented as the list seq. * For example, in the Fibonacci sequence, seq is [1, 1, 2] * The function to apply to the sequence at each iteration, represneted as a lambda function with the arguments x and i for the the sequence list seq and the iteration number respectively. * For example, in the Fibonacci sequence the kernel function is lambda x, i: x[i-1] + x[i-2]\n\n##| tags: []\ndef sequencer(n:int = 10, seq=[1, 1, 2], kernel=lambda x, i: x[i-1] + x[i-2]):\n    \"\"\"\n    Computes a Sequence using a for loop. \n    \n    Parameter n in integer which must be > 3. Defaults to 10.\n    Parameter seq is as list in the initial state of the sequence. Must have at least one value. Defaults to Fibonacci [1,1,2]\n    Parameter kernel is the kernel function applied to the series at each iteration. x stands for the seq list, i to the iteration number. Defaults to lambda x, i: x[i-1] + x[i-2]\n    \n    Returns a string as a comma-limited series.\n    \"\"\"\n    \n    for i in range(len(seq), n): seq.append(kernel(seq, i))\n    return ', '.join([str(x) for x in seq])\n\n\nn = 8\n\n\n%time sequencer(n, [0], lambda x, i: i)\n\nThe series of positive integers\n\nsequencer(n, [1], lambda x, i: x[i-1] + 1)\n\nThe series of even numbers\n\nsequencer(n, [2], lambda x, i: x[i-1] + 2)\n\nThe series of odd numbers\n\nsequencer(n, [1], lambda x, i: x[i-1] + 2)\n\nThe series of Fibonacci numbers\n\nsequencer(n, [1,1,2], lambda x, i: x[i-1] + x[i-2])\n\nThe series of Squares\n\nsequencer(n, [2], lambda x, i: x[i-1]**2)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#overview",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#overview",
    "title": "NB: Variable Scope",
    "section": "Overview",
    "text": "Overview\nA variable’s scope is the part of a program where it is visible.\n\nScope refers to the coding region, such as a function block, from which a particular Python object is accessible.\nVisible means available or usable to the code block in question.\nIf a variable is in scope to a function, it is visible the function.\nIf it is out of scope to a function, it is not visible the function.\n\nWhen a variable is defined inside of a function, is is not visible outside of the function. * We say such variables are local to the function. * They are also removed from memory when the function completes.\nWhen a variable is defined outside of any function in a script, it is visible to any function inside of the script * We say such variables are global to the functions in the file or context in which the variables are defined. * A function can replace a global variable with local variable by defining that variable. In this case, a variable can have global and local versions in the same program.\nSometimes variable scope is called lexical scope.\nIt is helpful to have a good understanding of scope to avoid surprises and confusion.\nThe concept is easier than it may look in the abstract. Let’s look at some examples where we vary the use of local and global definitions of x."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#lutz-on-scoping",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#lutz-on-scoping",
    "title": "NB: Variable Scope",
    "section": "Lutz on Scoping",
    "text": "Lutz on Scoping\nHere’s an excerpt from Lutz, Chapter 17. Please read the whole thing.\nThe enclosing module is a global scope. Each module is a global scope—that is, a namespace in which variables created (assigned) at the top level of the module file live. Global variables become attributes of a module object to the outside world after imports but can also be used as simple variables within the module file itself.\nThe global scope spans a single file only. Don’t be fooled by the word “global” here—names at the top level of a file are global to code within that single file only. There is really no notion of a single, all-encompassing global file-based scope in Python. Instead, names are partitioned into modules, and you must always import a module explicitly if you want to be able to use the names its file defines. When you hear “global” in Python, think “module.”\nAssigned names are local unless declared global or nonlocal. By default, all the names assigned inside a function definition are put in the local scope (the namespace associated with the function call). If you need to assign a name that lives at the top level of the module enclosing the function, you can do so by declaring it in a global statement inside the function. If you need to assign a name that lives in an enclosing def, as of Python 3.X you can do so by declaring it in a nonlocal statement.\nAll other names are enclosing function locals, globals, or built-ins. Names not assigned a value in the function definition are assumed to be enclosing scope locals, defined in a physically surrounding def statement; globals that live in the enclosing module’s namespace; or built-ins in the predefined built-ins module Python provides.\nEach call to a function creates a new local scope. Every time you call a function, you create a new local scope—that is, a namespace in which the names created inside that function will usually live. You can think of each def statement (and lambda expression) as defining a new local scope, but the local scope actually corresponds to a function call. Because Python allows functions to call themselves to loop—an advanced technique known as recursion and noted briefly in Chapter 9 when we explored comparisons—each active call receives its own copy of the function’s local variables. Recursion is useful in functions we write as well, to process structures whose shapes can’t be predicted ahead of time; we’ll explore it more fully in Chapter 19.\nAnd here is a nice visualization of scopes:\n\n\n\nlp5e_1701.png\n\n\nPlease read Lutz, Chapter 17 for a good overview of scoping."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#the-tinted-glass-metaphor",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#the-tinted-glass-metaphor",
    "title": "NB: Variable Scope",
    "section": "The Tinted Glass Metaphor",
    "text": "The Tinted Glass Metaphor\n\nSo, code regions within a program are like vehicles with tinted glass: * Passengers can see outside, but outsiders can’t see inside. * Passengers in a vehicle can let outsiders look in by lowering the window.\nOr something. Lile models, all metaphors are wrong, but some are useful. :-)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-1",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-1",
    "title": "NB: Variable Scope",
    "section": "Example 1",
    "text": "Example 1\nx defined outside a function but used inside of it\nIn the code below: * x is global and seen from inside the function.\n* a is local to the function. trying to print outside function throws error.\nNote that arguments are essentially locally defined variables.\n\nx = 10\n\ndef scope_func1(a):\n    out = x + a\n    return out\n\nThe following works because x is global and functions can access globals so long as they don’t reassign the variable name.\n\ny = scope_func1(6)\nprint(y)\n\nThe following fails because a local and not visible outside the function.\n\nprint(a)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2",
    "title": "NB: Variable Scope",
    "section": "Example 2",
    "text": "Example 2\nx defined both outside and inside function, and used inside the function\nThis function reassigns x, so it becomes local.\nNote that a variable becomes local once it is used in an assignment statement within a function, or if it the name of an argument.\n\nx = 10 # Global\n\ndef scope_func2(a):\n\n    x = 20 # Local\n    print('x from inside:', x)\n    \n    out = x + a\n    \n    return out\n\n\ny = scope_func2(6)\nprint(y)\nprint('x from outside:', x)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2a",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2a",
    "title": "NB: Variable Scope",
    "section": "Example 2a",
    "text": "Example 2a\nHere we define x as an argument.\nThis has the same effect as defining it in the body of the function.\n\nx = 10 # Global\n\ndef scope_func2a(a, x=20): # Argment variables are local\n\n    print('x from inside:', x)\n    \n    out = x + a\n    \n    return out\n\n\nprint('x from outside before function:', x)\ny = scope_func2a(6)\nprint(y)\nprint('x from outside before function:', x)\n\nAs an argument, though, it can be assigned the value of the global.\nNevertheless, only the value is being passed between the global and local versions of x.\n\nx = 10 # Global\n\ndef scope_func2a(a, x=20):\n\n    print('x from inside before incremenet:', x)\n    x += 10\n    print('x from inside after incremenet:', x)\n    \n    out = x + a\n    \n    return out\n\n\nprint('x from outside before function:', x)\ny = scope_func2a(6, x)\nprint(y)\nprint('x from outside after function:', x)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-3",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-3",
    "title": "NB: Variable Scope",
    "section": "Example 3",
    "text": "Example 3\nx defined both outside and inside function, and used inside the function in both global and local modes\nThis one is interesting. It fails, but it’s not clear why at first.\n\nx = 10\n\ndef scope_func3(a):\n    print('x from fcn, before local definition:', x) # Global use of x\n    x = 20 # Local use of x\n    print('x from fcn, after local definition:', x)\n    out = x + a\n    return out\n\n\nprint('x from outside before local definition:', x)\nscope_func3(6)\nprint('x from outside after local definition:', x)\n\nThe error can be fixed by referencing x as global inside function.\n\nx = 10\n\ndef scope_func4(a):\n    global x\n    \n    print('x from inside, before local definition:', x)\n    x = 20\n    print('x from inside, after local definition:', x)\n    \n    out = x + a\n    return out\n\n\nprint('x from outside, before local definition:', x)\ny = scope_func4(6)\nprint(y)\nprint('x from outside, after local definition:', x)\n\nNote that the two instances of the variable z coexist in the same script because of the rules of scoping."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#local-global-conflicts",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#local-global-conflicts",
    "title": "NB: Variable Scope",
    "section": "Local / global conflicts",
    "text": "Local / global conflicts\nWhat will calling guess() do?\nHint: “If you assign a name in any way within a def, it will become a local to that function by default.” (Lutz)\n\nx = 10\n\ndef guess():\n    x += 10 \n    print(x)\n\n\nguess()\n\nConsider the following expression, which is the same as the unary operation inside of the function guess().\n\nx = x + 10\n\nThe x on the left is local, since it is being defined inside the function.\nHowever, the x on the right is assumed to already be defined, and so is global.\nIn effect, Python is presented with a contradiction and so throws an error.\nWe will see that R does not do this; it just goes with the global."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#nonlocal",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#nonlocal",
    "title": "NB: Variable Scope",
    "section": "Nonlocal",
    "text": "Nonlocal\nIf a variable is assigned in an enclosing def, it is nonlocal to nested functions.\nThe nonlocal keyword is similar to global, except that it refers to the scope of the enclosing function, not the script that contains the funtions.\n\nx = 10 # Global\ndef func1(): # Enclosing function\n    x = 20 # Local to function; \"Nonlocal\" to nested function\n    def func1a():\n        x = 30 # Local to nested function\n        print(x)\n    func1a()\n    print(x)\n\n\nprint(x)\nfunc1()\nprint(x)\n\n\nx = 10\ndef func2():\n    x = 20\n    def func2a():\n        nonlocal x\n        x = 30\n        print(x)\n    func2a()\n    print(x)\n\n\nprint(x) # 1\nfunc2()\nprint(x) # 4\n\n\nx = 10\ndef func3():\n    x = 20\n    def func3a():\n        global x\n        x = 30\n        print(x)\n    func3a()\n    print(x)\n\n\nprint(x)\nfunc3()\nprint(x)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#namespaces",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#namespaces",
    "title": "NB: Variable Scope",
    "section": "Namespaces",
    "text": "Namespaces\nDefinitions of scope make reference to namespaces. Scope and namespaces are closely intertwined concepts. Sometimes it is assumed that the reader knows what this means.\nIf you’ve never heard of namespaces, or are unsure of what they are, here’s a brief explanation.\nA namespace is a system that allows for a unique name to associated with each and every object in a Python program. * Remember that an object can be anything in Python, not just variable, e.g. a function or a class. * Python maintains namespaces internally as dictionaries.\nA good analogy to a namespace system is the file system on a computer. You can have files of the same name so long as they are in different folders. The complete name of the file is actually the filename and the names of its parent folders, i.e. the path to the file in the file system.\nAnother anology is in human names – personal names and family names, i.e. first and last names in European countries. These in turn might be contained by larger social groupings.\nFinally, another analogy is home addresses – house numbers and street names can be reused based on their “path” in the tree of geographic entities that include cities, states, nations, etc.\nSimilarly, Python understands what exact method or variable one is trying to point to in the code, depending upon the namespace.\nNote that in each of these cases, the data structure is a directed acyclic graph (DAG), which is universal structure for organizing unique names."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#some-visualizations",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#some-visualizations",
    "title": "NB: Variable Scope",
    "section": "Some Visualizations",
    "text": "Some Visualizations\n\nThe same object name can be present in multiple namespaces as isolation between the same name is maintained by their namespace.\n\nSource: “Namespaces and Scope in Python” (GFG)."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#basic-insight",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#basic-insight",
    "title": "NB: Functions Calling Functions",
    "section": "Basic Insight",
    "text": "Basic Insight\nFunctions contain any code, so they can contain functions. * Functions can call other functions * Functions can define new functions\nWe create functions that call functions in order to break a complex process into components. * Some functions focus on simple component processes * Other functions combine these into higher order processes * Some functions may be focused on computation, while others may be focused on interacting with users or data sources * We can think of this a division of labor, or “separation of concerns,” among functions\nWhen you create groups of functions, they often form natural groups that associated with a common process or task. * These function groups often share variables in addition to calling each ohter\nLet’s look at some examples to illustrate these points."
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-1-converting-temperatures",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-1-converting-temperatures",
    "title": "NB: Functions Calling Functions",
    "section": "Example 1: Converting Temperatures",
    "text": "Example 1: Converting Temperatures\nHere are three functions that work together to make a temperature converter.\nNotice how the last function integrates the first two.\n\ndef f_to_c(temp):  \n    \"\"\"\n    Converts F to C and returns a rounded result.\n    Expects an integer and returns an integer.\n    \"\"\"\n    return round((temp - 32) * (5/9))\n    \ndef c_to_f(temp):  \n    \"\"\"\n    Converts C to F and returns a rounded result.\n    Expects an integer and returns an integer.\n    \"\"\"\n    return round(temp * (9/5) + 32)\n    \ndef convert(temp, scale): \n    \"\"\"\n    Combines conversion functions into a two-way converter.\n    Expects a souce temp (int) and a target scale ('f' or 'c').\n    \"\"\"\n    if scale.lower() == \"c\":\n        return f_to_c(temp)  # function call to f_to_c\n    else:\n        return c_to_f(temp)  # function call to c_to_f\n\nNow, here is function that combines the above functions into a user-facing interface to the other functions.\n\n##| tags: []\ndef convert_app():\n    \"\"\"\n    Provides a user-interface to the the conversion functions.\n    \"\"\"\n    \n    # Get user input\n    temp = int(input(\"Enter a temperature: \"))                \n    scale = input(\"Enter the scale to convert to: (c or f) \")[0].lower()\n    \n    # Infer source scale, to be used in the output message\n    if scale == 'c':\n        current_scale = 'f'\n    else:\n        current_scale = 'c'\n    \n    # Do the conversion\n    converted = convert(temp, scale)\n    \n    # Print results for user\n    print(f\"{temp}{current_scale.upper()} is equal to {converted}{scale.upper()}.\")\n\n\nconvert_app()\n\n\nA More Pythonic Solution\nWe replace if/then statements with dictionary logic.\n\n## Put your logic in the data structure\nconverters = {\n    'c': lambda t: (t - 32) * (5/9),\n    'f': lambda t: t * (9/5) + 32\n}\n\n\ndef convert_app2():\n    \n    # Input from user\n    source_temp  = int(input(\"Enter a temperature: \"))                \n    target_scale = input(\"Enter the scale to convert to: (c or f) \")\n    \n    # Internal computations\n    target_temp  = converters[target_scale](source_temp)\n    # source_scale = list(set(converters.keys()) - set(target_scale))[0]\n    source_scale = (set(converters.keys()) - set(target_scale)).pop()\n    \n    # Output to user\n    print(source_temp, source_scale, \"converted becomes:\" , round(target_temp), target_scale)\n\n\nconvert_app2()"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-2-counting-vowels",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-2-counting-vowels",
    "title": "NB: Functions Calling Functions",
    "section": "Example 2: Counting Vowels",
    "text": "Example 2: Counting Vowels\n\n## Predicate functions - often used as helper functions that return True or False\n\ndef is_vowel(l):\n    if l == \"a\" or l == \"e\" or l == \"i\" or l == \"o\" or l == \"u\":\n        return True  # if the letter is a vowel, return True\n    else:\n        return False # else, return False\n        \ndef num_vowels(my_string):\n    my_string = my_string.lower()\n    count = 0\n    for i in range(len(my_string)): # for each character\n        if is_vowel(my_string[i]):  # call function above\n            count += 1              # increment count if true\n    return count\n    \ndef vcounter():\n    my_str = input(\"Enter a string: \")\n    vcount = num_vowels(my_str)\n    print(f\"There are {vcount} vowels in the string.\")\n\n\nvcounter()\n\n\nA More Pythonic Solution\nWe can use a lambda function with a comprehension to replace the fisrt two functions above.\n\nvowel_count = lambda x: len([char for char in x.lower() if char in \"aeiou\"])\n\n\ntest_str = \"Whatever it is, it is what it is.\"\n\n\nvowel_count(test_str)"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-3-calculating-tax",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-3-calculating-tax",
    "title": "NB: Functions Calling Functions",
    "section": "Example 3: Calculating Tax",
    "text": "Example 3: Calculating Tax\nWe write two related functions: * One to compute the tax based on a gross pay and a tax rate. * One to compute the net pay using the previous function.\nIn addition, we want to write some functions that use these functions to interact with a user. * One to get the input value of the gross pay and print the tax. * One to print the net pay based on the previous function.\nNote the division of labor, or “separation of concerns”, in these functions: * Some do calculative work * Some do interactive work\nTo compute tax, we have these data:\ngross_pay    tax_rate\n---------------------\n0   - 240    0%\n241 - 480    15%\n481 - more   28% \n\n\n\n\n\n\nThis time, we want to create a group of functions that expect some global variables to exist and use these instead of return statements.\n\n\nIn the code below, we globalize any variables that are assigned in our functions.\n\n\nThis allows them to be shared by all the other functions.\n\n\nNote that this is effective when our global environment – the containing script – contains only these functions.\n\n\nLater in this course, we will look at mechanisms to segment our code in this way.\n\n\n\n\ndef compute_tax():\n    \"\"\"\n    Computes tax rate and applies to gross pay to get tax.\n    Expects gross_apy to be defined globally.\n    Adds tax_rate and tax to globals for use by other functins.\n    \"\"\"\n\n    global tax_rate, tax\n\n    # Get rate by lower bound\n    if gross_pay > 480:\n        tax_rate = .28\n    elif gross_pay > 240:\n        tax_rate = .15\n    else:\n        tax_rate = 0\n        \n    tax = gross_pay * tax_rate\n            \ndef compute_net_pay():\n    \"\"\"\n    Computes net pay based on globals produced by compute_tax().\n    Expects gross_pay and tax to be defined globally.\n    Adds net_pay to to globals.\n    \"\"\"\n    \n    global net_pay\n    \n    net_pay = gross_pay - tax\n\ndef get_tax():   \n    \"\"\"\n    Computes and prints tax based on user input.\n    Essentially a wrapper around compute_tax().\n    Adds gross_pay to globals.\n    \"\"\"\n    \n    global gross_pay\n    \n    gross_pay = int(input(\"Enter your gross pay in dollars: \"))                            \n    \n    compute_tax()\n    \n    print(f\"Based on a tax rate of {round(tax_rate * 100)}%, the tax you owe on ${gross_pay} is ${round(tax)}.\")\n    \ndef get_net_pay():\n    \"\"\"\n    Computes and prints net pay based on globals.\n    \"\"\"\n    \n    compute_net_pay()\n    \n    print(f\"Your take home (net) pay is ${round(net_pay)}.\")\n    \ndef do_all():\n    \"Runs both user-facing functions.\"\n    get_tax()\n    get_net_pay()\n\n\nget_tax()\n\n\nget_net_pay()\n\n\ndo_all()"
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#concluding-observations",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#concluding-observations",
    "title": "NB: Functions Calling Functions",
    "section": "Concluding Observations",
    "text": "Concluding Observations\n\nNotice how each example has functions that build on each other.\nThese functions share both data and a general goal.\nThe fact that data and functions go together is the motivation for creating classes."
  }
]