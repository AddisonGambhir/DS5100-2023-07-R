[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programming for Data Science",
    "section": "",
    "text": "Welcome to DS 5100 Programming for Data Science!"
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_Lesson.html",
    "href": "lessons/M01_GettingStarted/M01_Lesson.html",
    "title": "2  M01 Lesson",
    "section": "",
    "text": "3 Preparation\nDuring the technical orientation, you set up a GitHub account.\nYou also spent a little time browsing a sample repository, which you may wish to revisit:\nhttps://github.com/UVADS/orientation-technical\nYou also should be able check off the following boxes:\n\nUnderstand the difference between Git and GitHub.\nUnderstand the purpose of Git and Github for data science work.\nEnsure Git is installed on your computer.\nUnderstand how to find a repository on GitHub.\n\n\n\n4 Discussion\n\nWelcome! Introductions.\nReview SurveyLinks to an external site.\nReview Syllabus (if questions)\nReview setup, etc.:\n\nVPN — use UVA Anywhere\nO’Reilly\nCanvas site and docs\nRivanna access and file system\n\nQuestions regarding readings, etc.\nIn-class activity (see next item in module)"
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_Activity_GitHub.html",
    "href": "lessons/M01_GettingStarted/M01_Activity_GitHub.html",
    "title": "3  Activity: Using Git and GitHub",
    "section": "",
    "text": "4 Git and GitHub\nGit and GitHub are two tools that work together, but it is important to understand what each does and how they are different to each other.\nHere are some basic things to know:\n\nGit is a stand-alone version control system that runs on a variety of platforms, including Linux, MacOS, and Windows.\nGitHub is a company that offers a cloud-based Git repository hosting service that makes it easy to use Git for version control, collaboration, and sharing code. This service is offered through a website.\nThere are other Git hosting services out there, including GitLab, and open source tool that can be installed on a local server.\nGitHub builds on top of Git and adds some functionality to it, while Git can interact with GitHub through actions like cloning, pushing, and pulling. However, Git does not require GitHub to function.\nGit does not have a fork command. GitHub (and other hosting services such as GitLab) have added this command as a convenient way to copy repositories.\n\n\n\n5 Using Git and GitHub Together\n\n\n\nAlt text\n\n\nSource: XKCD #1597\nA basic series of actions one continually makes with Git are the following:\n\n\n\nAction\nDescription\nCommand\n\n\n\n\nFork\nForking a repo makes a copy of someone else’s repo in your GitHub account, which you can now modify. Note: Forking does not have to be performed if you are not interested in altering the code. You can clone it directlty.\nThis is done through GitHub’s web interface by clicking on the Fork button.\n\n\nClone\nCloning the repo to a workspace to which you have access, whether a local machine or a remote resource (e.g. Rivanna).\ngit clone <repo>\n\n\nAdd\nCreating or editing a file locally and then adding it to the list of files git will keep track of.\ngit add <filename>Note that you may use wildcards here, e.g. *, to add more than one file at a time.\n\n\nCommit\nCommitting the changes made to the file by adding them to the repo’s database of changes. This is accompanied by a brief, descriptive message of the changes made.\ngit commit -m \"What you did\"\n\n\nPush\nPushing the changes to the remote repo that you cloned from. This uploads both the files and the database changes to the repo.\ngit push\n\n\nPull\nPulling, i.e. downloading, any changes that have been made to the remote repo to your local repo. This usually happens if you are working in teams on the same project.\ngit pull\n\n\nPull Request\nThis is a request made to the owner of the original repo to pull in the changes you’ve made to your forked copy.\nThis is done through GitHub’s web interface. Read the docs .\n\n\nFetch Upstream\nThis refreshes the content of your forked repo with the content from the original repo.\nThis is done through GitHub’s web interface. Read the docs. \n\n\n\n\nNote: This is not the only pattern to use with Git. Here is another — the Git Fork-Branch-Pull Workflow\n\nHere is a visualization of the process:\n Diagram of common git workflow\nIn this diagram, the dashed lines refer to actions performed only once for a give repo. Forking and cloning are done to acquire a repo, while fetch upstream (aka sync fork) and pull requests on the GitHub server, and pull/push on your local machine, are done repeatedly as you develop and share code.\nNote also that the here “Remote workstation” may be confusing; it means remote relative to your laptop, e.g. Rivanna, which we sometimes call local relative to the GitHub repo. In any case, note that these two copies of the same repo do not communicate with each other directly, but rather through their common relationship with the GitHub hosted instance of the repo.\n\n\n\n6 In-Class Activity\nLet’s try this now with our course repo. Be sure you are inside the course directory we created earlier. Also, we assume you have already created a GitHub account.\nFork the course GitHub hosted repository (“repo”) to your GitHub account.\nGo to https://github.com/ontoligent/DS5100-2023-07-R in your web browser.\n\n\n\n\n\n\nNote\n\n\n\nThis is the course repo — all of the course notebooks and other code will be available here. Each week, you will access your course materials here.\n\n\nClick on the Fork icon in the upper right and follow the prompts to finish the process.\nYou should end up at the web page of your newly forked repo.\nYou will now have a copy of the repo in your GitHub account.\nClone the forked repo for this course inside of your course directory on Rivanna.\nFind the green Code button and click on it. You should see something like this:\n\nMake sure you have selected the SSH option.\n\n\n\n\n\n\nDanger\n\n\n\nNote: This requires that you have SSH set up.\n\n\nThen click on the copy icon and paste the value into the following command:\ngit clone https://github.com:ontoligent-design/DS5100-2023-01-O.git\n\nBe sure to clone the repo from your account – i.e. do not cut-and-paste the line above!\n\nYou now have a copy the course repo to your account on Rivanna.\nThis will be the directory you created in your pre-class activities under Documents/.\nCreate a new file in your newly cloned repo.\nGo to your command line window on Rivanna.\nUse cd to move into the directory just created by the clone operation.\nMove into the directory lessons/M01_GettingStarted/hello\n\n\n\n\n\n\nDanger\n\n\n\nMake sure you are in this directory before proceeding.\n\n\nIf you get lost – for example if you moved around the file system before this step – you can cd to the absolute path:\ncd ~/Documents/MSDS/DS5100/DS5100-2023-07-R/lessons/M01_GettingStarted/hello \nNote that the tilde sign ~ stands for the path to your home directory.\nUsing the file editor on Rivanna, create and save new file called <userid>_hello.txt, replacing <userid> with your actual user ID, e.g. rca2t_hello.txt.\nIn the file, introduce yourself by answering the question: What is the most recent film you watched and enjoyed?\nSave the file.\nAdd and commit the changes you made.\nNow do the following:\ngit add <userid>_hello.txt\ngit commit -m \"Created file for class\"\nPush your new file to the repo on GitHub.\nBefore proceeding, you will need to create personal access token to be able to write to your repo on GitHub. To get one, follow the instructions here — Creating a personal access token.\nOnce you have created and copied your PAT to a safe place, do the following:\ngit push\nWhen prompted for a password, use your PAT instead.\nNote: A more efficient way to work with GitHub is to use SSH. You are free to use this option if you are comfortable following through with the instructions.\nCreate a Pull Request\nFinally, make a pull request to have your file added to the original site. To do this, follow these steps:\nClick on the “Pull requests” menu item (see image below) on the web page for your repo.\n\n\n\nImage of pull request button on GitHub\n\n\nClick on the green “New pull request” button.\nClick on the green “Create pull request” button.\nGive the request the title “In-class activity” and then press the green “Create pull request” button at the bottom of the form.\nNow the ball is in the instructor’s court to merge the request with the original. If you put your file in the right place and named it properly, it will be merged.\n\n\n\n7 Going Forward\nDuring the semester, you will not be making pull requests to submit your work. We do it here to demonstrate the concept since it is so basic to working with GitHub in the real world.\nInstead of making pull requests, you will be using a separate repository for your work So, you will be working with two repositories going forard:\n\nThe Course Repo, which is where you will get course materials.\nYour Assessments Repo, which is where you will be your finished work as assigned."
  }
]