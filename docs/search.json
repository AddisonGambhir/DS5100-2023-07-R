[
  {
    "objectID": "index.html#preface",
    "href": "index.html#preface",
    "title": "Programming for Data Science",
    "section": "0.1 Preface",
    "text": "0.1 Preface\nWelcome to Programming for Data Science, a collection of materials designed to support the course DS 5100 in the Data Science curriculum at UVA.\nIn this course, you will develop skills in Python and R Programming, as well as GitHub.\nThe objective of this course is to introduce essential programming concepts, structures, and techniques.\nYou will gain confidence in not only reading code, but learning what it means to write good quality code.\nAdditionally, essential and complementary topics are taught, such as testing and debugging, exception handling, and an introduction to visualization.\nThis course is project based, consisting of a semester project and final project presentations."
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_Lesson.html#preparation",
    "href": "lessons/M01_GettingStarted/M01_Lesson.html#preparation",
    "title": "2  Lesson",
    "section": "2.1 Preparation",
    "text": "2.1 Preparation\nDuring the technical orientation, you set up a GitHub account.\nYou also spent a little time browsing a sample repository, which you may wish to revisit:\nhttps://github.com/UVADS/orientation-technical\nYou also should be able check off the following boxes:\n\nUnderstand the difference between Git and GitHub.\nUnderstand the purpose of Git and Github for data science work.\nEnsure Git is installed on your computer.\nUnderstand how to find a repository on GitHub."
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_Lesson.html#discussion",
    "href": "lessons/M01_GettingStarted/M01_Lesson.html#discussion",
    "title": "2  Lesson",
    "section": "2.2 Discussion",
    "text": "2.2 Discussion\n\nWelcome and Introductions.\nReview Survey.\nReview Syllabus.\nReview setup, etc.:\n\nVPN — use UVA Anywhere.\nO’Reilly Media site.\nCanvas site and docs.\nRivanna access and file system.\n\nQuestions regarding readings, etc.\nIn-class activity (see next item in module)"
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_SSH.html#overview",
    "href": "lessons/M01_GettingStarted/M01_SSH.html#overview",
    "title": "3  Setting up SSH for GitHub",
    "section": "3.1 Overview",
    "text": "3.1 Overview\n\nThis method will allow you to interact with your repos hosted on GitHub without having to enter your login credentials each time.\nYou will create an SSH key on your local machine. By \"local machine,\" we mean the machine where you will be working and pulling to, e.g your laptop or Rivanna. In other words, it's local relative to GitHub.\nSSH keys have a public and private component. These are hash strings that are stored in files. Both will be generated on your machine.\nYou will copy and paste the generate public key to your GitHub account.\nGoing forward, you will clone from your account using the SSH protocol."
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_SSH.html#steps",
    "href": "lessons/M01_GettingStarted/M01_SSH.html#steps",
    "title": "3  Setting up SSH for GitHub",
    "section": "3.2 Steps",
    "text": "3.2 Steps\n\n3.2.1 Part A\nOn your local machine\n\nGet to the command line (i.e. the shell).\n\nOn a Mac, open Terminal.\nIf you are on Windows and you have admin rights, first install git-bash. Otherwise try to access the Linux subsystem.\nOn Rivanna, either connect via SSH or use Rivanna Shell Access (under Clusters).\n\nMove into your root directory and enter cd.\nGenerate the key.\n\n\nEnter: ssh-keygen -t ed25519 -C \"your_email_id@example.com\"\nBe sure to use the email address associated with your GitHub account in the above command.\n\n\nAt the prompt, type in a secure passphrase\n\nYou don't have to do this, but it is advised.\nCreate a memorable sentence.\nA good passphrase should have at least 15, preferably 20 characters and be difficult to guess. It should contain upper case letters, lower case letters, digits, and preferably at least one punctuation character.\n\nAdd the key to ssh-agent.\n\nEnter: eval \"$(ssh-agent -s)\"\nEnter: ssh-add ~/.ssh/id_ed25519\n\nIf you're using macOS Sierra 10.12.2 or later, you will need to modify your ~/.ssh/config file to automatically load keys into the ssh-agent and store passphrases in your keychain. Follow the instructions here (at step 2).\n\n\n\n3.2.2 Part B\nOn your GitHub account\nGet the public key that was just generated.\n\nEnter: more ~/.ssh/id_ed25519.pub\nCopy the result to your clipboard (e.g. by blocking off the line and entering Ctrl-C).\nThe key should begin ssh-ed25519 and end with the email address you used in generating the key. In between it will have a long string of alphanumeric characters.\n\nOn GitHub, go to your account settings and select \"SSH and GPG Keys\" from the side menu.\n\nA link to your account settings can be found in the drop-down list produced by clicking on your user icon in the upper right of the website.\n\nUnder \"SSH keys,\" press the \"New SSH Key\" button.\n\nAdd a brief title describing the context of the key, i.e. the local machine where it was generated, e.g. Rivanna.\nChoose \"Authentication Key\" as the Key type.\nPaste the key into the Key text area.\nSubmit the form by pressing \"Add SSH key.\"\n\nYou are now good to go. Whenever you clone a site from your GitHub account, choose the SSH link."
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_SSH.html#information-sources",
    "href": "lessons/M01_GettingStarted/M01_SSH.html#information-sources",
    "title": "3  Setting up SSH for GitHub",
    "section": "3.3 Information Sources",
    "text": "3.3 Information Sources\nAbout SSH - https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh\nGenerate the key - https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\nAbout pass phrases - https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases\nAdding the key to GitHub - https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account\nUpdating repos with SSH - https://docs.github.com/en/get-started/getting-started-with-git/managing-remote-repositories#switching-remote-urls-from-https-to-ssh"
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_Activity_GitHub.html#git-and-github",
    "href": "lessons/M01_GettingStarted/M01_Activity_GitHub.html#git-and-github",
    "title": "4  Activity: Using Git and GitHub",
    "section": "4.1 Git and GitHub",
    "text": "4.1 Git and GitHub\nGit and GitHub are two tools that work together, but it is important to understand what each does and how they are different to each other.\nHere are some basic things to know:\n\nGit is a stand-alone version control system that runs on a variety of platforms, including Linux, MacOS, and Windows.\nGitHub is a company that offers a cloud-based Git repository hosting service that makes it easy to use Git for version control, collaboration, and sharing code. This service is offered through a website.\nThere are other Git hosting services out there, including GitLab, and open source tool that can be installed on a local server.\nGitHub builds on top of Git and adds some functionality to it, while Git can interact with GitHub through actions like cloning, pushing, and pulling. However, Git does not require GitHub to function.\nGit does not have a fork command. GitHub (and other hosting services such as GitLab) have added this command as a convenient way to copy repositories."
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_Activity_GitHub.html#using-git-and-github-together",
    "href": "lessons/M01_GettingStarted/M01_Activity_GitHub.html#using-git-and-github-together",
    "title": "4  Activity: Using Git and GitHub",
    "section": "4.2 Using Git and GitHub Together",
    "text": "4.2 Using Git and GitHub Together\n  Source\nA basic series of actions one continually makes with Git are the following:\n\n\n\nAction\nDescription\nCommand\n\n\n\n\nFork\nForking a repo makes a copy of someone else’s repo in your GitHub account, which you can now modify. Note: Forking does not have to be performed if you are not interested in altering the code. You can clone it directlty.\nThis is done through GitHub’s web interface by clicking on the Fork button.\n\n\nClone\nCloning the repo to a workspace to which you have access, whether a local machine or a remote resource (e.g. Rivanna).\ngit clone <repo>\n\n\nAdd\nCreating or editing a file locally and then adding it to the list of files git will keep track of.\ngit add <filename>Note that you may use wildcards here, e.g. *, to add more than one file at a time.\n\n\nCommit\nCommitting the changes made to the file by adding them to the repo’s database of changes. This is accompanied by a brief, descriptive message of the changes made.\ngit commit -m \"What you did\"\n\n\nPush\nPushing the changes to the remote repo that you cloned from. This uploads both the files and the database changes to the repo.\ngit push\n\n\nPull\nPulling, i.e. downloading, any changes that have been made to the remote repo to your local repo. This usually happens if you are working in teams on the same project.\ngit pull\n\n\nPull Request\nThis is a request made to the owner of the original repo to pull in the changes you’ve made to your forked copy.\nThis is done through GitHub’s web interface. Read the docs. \n\n\nFetch Upstream\nThis refreshes the content of your forked repo with the content from the original repo.\nThis is done through GitHub’s web interface. Read the docs. \n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is not the only pattern to use with Git. Here is another — the Git Fork-Branch-Pull Workflow\n\n\nHere is a visualization of the process:\n\n\n\nDiagram of common git workflow\n\n\nIn this diagram, the dashed lines refer to actions performed only once for a give repo. Forking and cloning are done to acquire a repo, while fetch upstream (aka sync fork) and pull requests on the GitHub server, and pull/push on your local machine, are done repeatedly as you develop and share code.\nNote also that the here “Remote workstation” may be confusing; it means remote relative to your laptop, e.g. Rivanna, which we sometimes call local relative to the GitHub repo. In any case, note that these two copies of the same repo do not communicate with each other directly, but rather through their common relationship with the GitHub hosted instance of the repo."
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_Activity_GitHub.html#in-class-activity",
    "href": "lessons/M01_GettingStarted/M01_Activity_GitHub.html#in-class-activity",
    "title": "4  Activity: Using Git and GitHub",
    "section": "4.3 In-Class Activity",
    "text": "4.3 In-Class Activity\nLet’s try this now with our course repo.\nBe sure you are inside the course directory we created earlier.\nAlso, we assume you have already created a GitHub account.\nFork the course GitHub hosted repository (“repo”) to your GitHub account.\nGo to https://github.com/ontoligent/DS5100-2023-07-R in your web browser.\n\n\n\n\n\n\nNote\n\n\n\nThis is the course repo — all of the course notebooks and other code will be available here. Each week, you will access your course materials here.\n\n\nClick on the Fork icon in the upper right and follow the prompts to finish the process.\nYou should end up at the web page of your newly forked repo.\nYou will now have a copy of the repo in your GitHub account.\nClone the forked repo for this course inside of your course directory on Rivanna.\nFind the green Code button and click on it. You should see something like this:\n\nMake sure you have selected the SSH option.\n\n\n\n\n\n\nImportant\n\n\n\nNote: This requires that you have SSH set up.\n\n\nThen click on the copy icon and paste the value into the following command:\ngit clone https://github.com:<github_user_name>/DS5100-2023-07-R.git\n\n\n\n\n\n\nImportant\n\n\n\nBe sure to clone the repo from your GitHub account, replacing <github_user_name> with your GitHub user name. Do not just cut-and-paste the line above!\n\n\nYou now have a copy the course repo to your account on Rivanna.\nThis will be the directory you created in your pre-class activities under Documents/.\nCreate a new file in your newly cloned repo.\nGo to your command line window on Rivanna.\nUse cd to move into the directory just created by the clone operation.\nMove into the directory lessons/M01_GettingStarted/hello\n\n\n\n\n\n\nImportant\n\n\n\nMake sure you are in this directory before proceeding.\n\n\nIf you get lost – for example if you moved around the file system before this step – you can cd to the absolute path:\ncd ~/Documents/MSDS/DS5100/DS5100-2023-07-R/lessons/M01_GettingStarted/hello \nNote that the tilde sign ~ stands for the path to your home directory.\nUsing the file editor on Rivanna, create and save new file called <userid>_hello.txt, replacing <userid> with your actual user ID, e.g. rca2t_hello.txt.\nIn the file, introduce yourself by answering the question: What is the most recent film you watched and enjoyed?\nSave the file.\nAdd and commit the changes you made.\nNow do the following:\ngit add <userid>_hello.txt\ngit commit -m \"Created file for class\"\nPush your new file to the repo on GitHub.\nSince you have SSH set up, you can issue the following command without having to enter a password:\n\ngit push\n\n\nCreate a Pull Request\nFinally, make a pull request to have your file added to the original site. To do this, follow these steps:\nClick on the “Pull requests” menu item (see image below) on the web page for your repo.\n\n\n\nImage of pull request button on GitHub\n\n\nClick on the green “New pull request” button.\nClick on the green “Create pull request” button.\nGive the request the title “In-class activity” and then press the green “Create pull request” button at the bottom of the form.\nNow the ball is in the instructor’s court to merge the request with the original. If you put your file in the right place and named it properly, it will be merged."
  },
  {
    "objectID": "lessons/M01_GettingStarted/M01_Activity_GitHub.html#going-forward",
    "href": "lessons/M01_GettingStarted/M01_Activity_GitHub.html#going-forward",
    "title": "4  Activity: Using Git and GitHub",
    "section": "4.4 Going Forward",
    "text": "4.4 Going Forward\nDuring the semester, you will not be making pull requests to submit your work. We do it here to demonstrate the concept since it is so basic to working with GitHub in the real world.\nInstead of making pull requests, you will be using a separate repository for your work So, you will be working with two repositories going forard:\n\nThe Course Repo, which is where you will get course materials.\nYour Assessments Repo, which is where you will be your finished work as assigned."
  }
]