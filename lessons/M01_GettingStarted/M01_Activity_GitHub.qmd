---
title: "Activity: Using Git and GitHub"
---

## Git and GitHub

Git and GitHub are two tools that work together, but it is important to understand what each does and how they are different to each other.

Here are some basic things to know:

1. Git is a stand-alone version control system that runs on a variety of platforms, including Linux, MacOS, and Windows. 
2. GitHub is a company that offers a cloud-based Git repository hosting service that makes it easy to use Git for version control, collaboration, and sharing code. This service is offered through a website.
3. There are other Git hosting services out there, including GitLab, and open source tool that can be installed on a local server.
4. GitHub builds on top of Git and adds some functionality to it, while Git can interact with GitHub through actions like cloning, pushing, and pulling. However, Git does not require GitHub to function.
5. Git does not have a fork command. GitHub (and other hosting services such as GitLab) have added this command as a convenient way to copy repositories. 

## Using Git and GitHub Together

![XKCD #1597](../media/xkcd-git.png)\ 
[Source](https://xkcd.com/1597)
 
A basic series of actions one continually makes with Git are the following:

| Action | Description | Command |
|--------|-------------|---------|
| **Fork** | Forking a repo makes a copy of someone else's repo in your GitHub account, which you can now modify. Note: Forking does not have to be performed if you are not interested in altering the code. You can clone it directlty.| This is done through GitHub's web interface by clicking on the Fork button. |
| **Clone** | Cloning the repo to a workspace to which you have access, whether a local machine or a remote resource (e.g. Rivanna). |	`git clone <repo>` |
| **Add** | Creating or editing a file locally and then adding it to the list of files git will keep track of. | `git add <filename>`<br>Note that you may use wildcards here, e.g. *, to add more than one file at a time. |
| **Commit** | Committing the changes made to the file by adding them to the repo's database of changes. This is accompanied by a brief, descriptive message of the changes made. | `git commit -m "What you did"` |
| **Push** | Pushing the changes to the remote repo that you cloned from. This uploads both the files and the database changes to the repo. | `git push` |
| **Pull** | Pulling, i.e. downloading, any changes that have been made to the remote repo to your local repo. This usually happens if you are working in teams on the same project. | `git pull` |
| **Pull Request**	| This is a request made to the owner of the original repo to pull in the changes you've made to your forked copy.	| This is done through GitHub's web interface. Read the [docs](https://docs.github.com/en/pull-requests).\ ![](../media/pull-request-button.jpg) |
| **Fetch Upstream** | This refreshes the content of your forked repo with the content from the original repo. | This is done through GitHub's web interface. Read the [docs](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork).\ ![Diagram of sync fork button on GitHub](../media/sync-fork.jpg) | 

::: {.callout-note}
This is not the only pattern to use with Git. Here is another — [the Git Fork-Branch-Pull Workflow](https://www.tomasbeuzen.com/post/git-fork-branch-pull/)
:::

Here is a visualization of the process:

![Diagram of common git workflow](../media/git.png)

In this diagram, the dashed lines refer to actions performed only once for a give repo. Forking and cloning are done to acquire a repo, while fetch upstream (aka sync fork) and pull requests on the GitHub server, and pull/push on your local machine, are done repeatedly as you develop and share code.

Note also that the here "Remote workstation" may be confusing; it means remote relative to your laptop, e.g. Rivanna, which we sometimes call local relative to the GitHub repo. In any case, note that these two copies of the same repo do not communicate with each other directly, but rather through their common relationship with the GitHub hosted instance of the repo. 

## In-Class Activity

Let's try this now with our course repo. 

Be sure you are inside the course directory we created earlier. 

Also, we assume you have already created a GitHub account.

**_Fork_ the course GitHub hosted repository ("repo") to your GitHub account.**

Go to {{< var github_url >}} in your web browser.

::: {.callout-note}
This is the course repo --- all of the course notebooks and other code will be available here.\ Each week, you will access your course materials here.
:::

Click on the Fork icon in the upper right and follow the prompts to finish the process.

You should end up at the web page of your newly forked repo.

You will now have a copy of the repo in your GitHub account.

**_Clone_ the forked repo for this course inside of your course directory on Rivanna.**

Find the green Code button and click on it. You should see something like this:

![](../media/git-clone.jpg)

Make sure you have selected the SSH option.

::: {.callout-important}
Note: This requires that you have SSH set up.
:::

Then click on the copy icon and paste the value into the following command:

```bash
git clone https://github.com:<github_user_name>/{{< var course_code >}}.git
```
::: {.callout-important}
Be sure to clone the repo from _your_ GitHub account, replacing `<github_user_name>` with your GitHub user name. Do not just cut-and-paste the line above!
:::

You now have a copy the course repo to your account on Rivanna.

This will be the directory you created in your pre-class activities under Documents/.

**_Create_ a new file in your newly cloned repo.**

Go to your command line window on Rivanna.

Use `cd` to move into the directory just created by the clone operation.

Move into the directory `lessons/M01_GettingStarted/hello`

::: {.callout-important}
Make sure you are in this directory before proceeding.
:::

If you get lost – for example if you moved around the file system before this step – you can cd to the absolute path:

```bash
cd ~/Documents/MSDS/DS5100/{{< var course_code >}}/lessons/M01_GettingStarted/hello 
```

Note that the tilde sign `~` stands for the path to your home directory.

Using the file editor on Rivanna, create and save new file called `<userid>_hello.txt`, replacing  `<userid>` with your actual user ID, e.g. `rca2t_hello.txt`.

In the file, introduce yourself by answering the question: What is the most recent film you watched and enjoyed?  

Save the file.

**_Add_ and _commit_ the changes you made.**

Now do the following:

```bash
git add <userid>_hello.txt
git commit -m "Created file for class"
```
 
**_Push_ your new file to the repo on GitHub.**

Since you have SSH set up, you can issue the following command without having to enter a password:

<!--
Before proceeding, you will need to create personal access token to be able to write to your repo on GitHub. To get one, follow the instructions here --- [Creating a personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).

Once you have created and copied your PAT to a safe place, do the following:
-->

```bash
git push
```

<!-- 
When prompted for a password, use your PAT instead. 

Note: A more efficient way to work with GitHub is to use SSH. You are free to use this option if you are comfortable following through with [the instructions](https://docs.github.com/en/authentication/connecting-to-github-with-ssh).
-->

**Create a _Pull Request_**

Finally, make a pull request to have your file added to the original site. To do this, follow these steps:

Click on the "Pull requests" menu item (see image below) on the web page for your repo.

![Image of pull request button on GitHub](../media/pull-request-button.jpg)

Click on the green "New pull request" button.

Click on the green "Create pull request" button.

Give the request the title "In-class activity" and then press the green "Create pull request" button at the bottom of the form.

Now the ball is in the instructor's court to merge the request with the original. If you put your file in the right place and named it properly, it will be merged.

## Going Forward

During the semester, you will not be making pull requests to submit your work. We do it here to demonstrate the concept since it is so basic to working with GitHub in the real world.  

Instead of making pull requests, you will be using a separate repository for your work So, you will be working with two repositories going forard:

1. **The Course Repo**, which is where you will get course materials.
2. **Your Assessments Repo**, which is where you will be your finished work as assigned.